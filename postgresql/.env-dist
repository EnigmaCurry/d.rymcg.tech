## POSTGRES_TRAEFIK_HOST can be any domain that resolves to your Docker server:
## This name is used in the server certificate as part of the sslmode=verify-full option
POSTGRES_TRAEFIK_HOST=postgres.example.com

## The docker tag for the postgres image:
POSTGRES_VERSION=14

## The postgres image creates the POSTGRES_USER as a Super User and with POSTGRES_PASSWORD.
## We will rename these here as POSTGRES_ADMIN_USER and POSTGRES_ADMIN_PASSWORD
## The POSTGRES_ADMIN_USER can ONLY log in from the root terminal console, not via the network.
POSTGRES_ADMIN_USER=root

## Note: This password is required to be set by the postgres image, but its not
## being used in any of the authentication schemes currently defined in our
## customized pg_hba.conf, so this password doesn't really matter.
POSTGRES_ADMIN_PASSWORD=change_me_but_it_doesnt_really_matter

## The database role for our application will be a much more limited role than
## the default one created by the base image. This role is named the same as the
## database, so the only thing to define is POSTGRES_DB. This role created for
## POSTGRES_DB is the ONLY user allowed to connect via the network. The user
## requires a valid signed certificate, or they will be denied access. See the
## very bottom line of ./config/pg_hba.conf (and /etc/postgresql/pg_hba.conf
## inside the container.)
POSTGRES_DB=tweedle

## The external TCP port mapped on the docker host (public access!)
EXTERNAL_TCP_PORT=5432

## Allowed IP address source range (CIDR with /netmask) for postgres clients to connect:
## eg. To allow any host to conenct (still needs valid certificate), use: 0.0.0.0/0
## eg. To allow only a single ip to connect (example 192.168.1.1), use: 192.168.1.1/32
ALLOWED_IP_SOURCERANGE=192.168.1.1/32
