#! This is a ytt template file for docker-compose.override.yaml
#! References:
#!   https://carvel.dev/ytt
#!   https://docs.docker.com/compose/extends/#adding-and-overriding-configuration
#!   https://github.com/enigmacurry/d.rymcg.tech#overriding-docker-composeyaml-per-instance

#! ### Standard project vars:
#@ load("@ytt:data", "data")
#@ project = data.values.project
#@ instance = data.values.instance
#@ context = data.values.context
#@ traefik_host = data.values.traefik_host
#@ ip_sourcerange = data.values.ip_sourcerange
#@ enable_http_auth = len(data.values.http_auth.strip()) > 0
#@ http_auth = data.values.http_auth_var
#@ enable_oauth2 = data.values.oauth2 == "true"
#@ authorized_group = data.values.authorized_group
#@ enable_mtls_auth = data.values.enable_mtls_auth == "true"
#@ mtls_authorized_certs = data.values.mtls_authorized_certs
#@ bearer_auth_tokens = data.values.bearer_auth_tokens.strip()
#@ enable_bearer_auth = len(bearer_auth_tokens)
#@ enable_shared_url_auth = data.values.enable_shared_url_auth == "true"
#@ enabled_middlewares = []

#@yaml/text-templated-strings
services:
  whoami:
    #@ service = "whoami"
    labels:
      - "backup-volume.stop-during-backup=true"
      #! Services must opt-in to be proxied by Traefik:
      - "traefik.enable=true"

      #! 'router' is the fully qualified key in traefik for this router/service: project + instance + service
      #@ router = "{}-{}-{}".format(project,instance,service)

      #! The host matching router rule:
      - "traefik.http.routers.(@= router @).rule=Host(`(@= traefik_host @)`)"
      - "traefik.http.routers.(@= router @).entrypoints=websecure"

      #@ enabled_middlewares.append("{}-ipallowlist".format(router))
      - "traefik.http.middlewares.(@= router @)-ipallowlist.ipallowlist.sourcerange=(@= ip_sourcerange @)"
      #@ if enable_http_auth:
      #@ enabled_middlewares.append("{}-basicauth".format(router))
      - "traefik.http.middlewares.(@= router @)-basicauth.basicauth.users=(@= http_auth @)"
      - "traefik.http.middlewares.(@= router @)-basicauth.basicauth.headerField=X-Forwarded-User"
      #@ end

      #@ if enable_oauth2:
      #@ enabled_middlewares.append("traefik-forward-auth@docker")
      #@ enabled_middlewares.append("header-authorization-group-{}@file".format(authorized_group))
      #@ end

      #@ if enable_mtls_auth:
      - "traefik.http.routers.(@= router @).tls.options=step_ca_mTLS@file"
        #@ if len(mtls_authorized_certs):
      - "traefik.http.middlewares.mtlsauth-(@= router @).plugin.certauthz.domains=(@= mtls_authorized_certs @)"
        #@ enabled_middlewares.append("mtlsauth-{}".format(router))
        #@ end
        #@ enabled_middlewares.append("mtls-header@file")
      #@ end

      #@ if enable_bearer_auth:
      - "traefik.http.middlewares.bearer-auth-(@= router @).plugin.apitoken.bearerHeader=true"
      - "traefik.http.middlewares.bearer-auth-(@= router @).plugin.apitoken.bearerHeaderName=Authorization"
      - "traefik.http.middlewares.bearer-auth-(@= router @).plugin.apitoken.tokens=(@= bearer_auth_tokens @)"
      - "traefik.http.middlewares.bearer-auth-(@= router @).plugin.apitoken.removeHeadersOnSuccess=true"
      - "traefik.http.middlewares.bearer-auth-(@= router @).plugin.apitoken.removeTokenNameOnFailure=true"
      - "traefik.http.middlewares.bearer-auth-(@= router @).plugin.apitoken.timestampUnix=true"
      #@ enabled_middlewares.append("bearer-auth-{}".format(router))
      #@ end

      #@ if enable_shared_url_auth:
      - "traefik.http.middlewares.shared-url-auth-(@= router @).plugin.sharedurl.cookieName=shared_whoami_auth"
      - "traefik.http.middlewares.shared-url-auth-(@= router @).plugin.sharedurl.jwtSecret=asdfasdf"
      #@ enabled_middlewares.append("shared-url-auth-{}".format(router))
      #@ end


      #! Override the default port that the app binds to:
      #! You don't normally need to do this, as long as your image has
      #! an EXPOSE directive in it, Traefik will autodetect it, but this is how you can override it:
      - "traefik.http.services.(@= router @).loadbalancer.server.port=8000"

      #! Apply all middlewares (do this at the end!)
      - "traefik.http.routers.(@= router @).middlewares=(@= ','.join(enabled_middlewares) @)"
