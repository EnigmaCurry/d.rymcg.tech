version: "3.3"

services:
  whoami:
    image: "traefik/whoami"
    security_opt:
      - no-new-privileges:true
    container_name: whoami
    restart: unless-stopped
    labels:
      - "traefik.enable=true"

      ### Normally whoami responds on any path with any HTTP method, but if we
      ### make all the routers path and/or method selective, then we can block
      ### certain requests easily by default (404).
      - "traefik.http.routers.whoami.rule=Host(`${WHOAMI_TRAEFIK_HOST}`) && (Path(`/`) || Path(`/health`))"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.tls.domains[0].main=${ROOT_DOMAIN}"
      - "traefik.http.routers.whoami.tls.domains[0].sans=*.${ROOT_DOMAIN}"

      - "traefik.http.middlewares.whoami-whitelist.ipwhitelist.sourcerange=${IP_SOURCERANGE}"
      - "traefik.http.routers.whoami.middlewares=whoami-whitelist@docker"

      ## Lots of various rules for demo/documentation purposes..

      # Block /forbidden (403 Forbidden; Using blockpath plugin middleware with catch all regex):
      - "traefik.http.routers.whoami-forbidden.rule=Host(`${WHOAMI_TRAEFIK_HOST}`) && PathPrefix(`/forbidden`)"
      - "traefik.http.routers.whoami-forbidden.entrypoints=websecure"
      - "traefik.http.routers.whoami-forbidden.tls=true"
      - "traefik.http.middlewares.whoami-forbidden.plugin.blockpath.regex=.*"
      - "traefik.http.routers.whoami-forbidden.middlewares=whoami-forbidden@docker"

      # Allow /just-get (but only to GET requests):
      - "traefik.http.routers.whoami-just-get.rule=Host(`${WHOAMI_TRAEFIK_HOST}`) && Path(`/just-get`) && Method(`GET`)"
      - "traefik.http.routers.whoami-just-get.entrypoints=websecure"
      - "traefik.http.routers.whoami-just-get.tls=true"

      # Allow /test/ and add custom request and response headers:
      - "traefik.http.routers.whoami-test.rule=Host(`${WHOAMI_TRAEFIK_HOST}`) && PathPrefix(`/test/`)"
      - "traefik.http.routers.whoami-test.entrypoints=websecure"
      - "traefik.http.routers.whoami-test.tls=true"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.X-Script-Name=testing-123"
      - "traefik.http.middlewares.testHeader.headers.customresponseheaders.X-Custom-Response-Header=yeppp"
      - "traefik.http.routers.whoami-test.middlewares=testHeader@docker"

      # Test forward authentication on secondary domain: auth.whoami.example.com
      # - "traefik.http.routers.whoami-auth.rule=Host(`auth.${WHOAMI_TRAEFIK_HOST}`)"
      # - "traefik.http.routers.whoami-auth.entrypoints=websecure"
      # - "traefik.http.routers.whoami-auth.tls=true"
      # - "traefik.http.routers.whoami-auth.middlewares=traefik-forward-auth@docker"

      
