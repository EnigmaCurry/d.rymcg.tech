S3PROXY_TRAEFIK_HOST=s3-proxy.example.com
S3PROXY_INSTANCE=

S3PROXY_REALM=s3-proxy
## S3 credentials (defaults are for self-hosted minio):
S3PROXY_S3_ENDPOINT=s3.example.com
S3PROXY_S3_BUCKET=
S3PROXY_S3_ACCESS_KEY_ID=
S3PROXY_S3_SECRET_ACCESS_KEY=

## IP address filtering - use CIDR notation, can specify multiple separated by commas
## Default (0.0.0.0/0) allows all IPs.
## Example to limit to single IP address 192.168.1.1:  SOURCERANGE="192.168.1.1/32"
## https://doc.traefik.io/traefik/middlewares/tcp/ipallowlist/
S3PROXY_IP_SOURCERANGE="0.0.0.0/0"

S3PROXY_PRINT_CONFIG=true

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
S3PROXY_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Forgejo server can log into your app and
# have full access.
S3PROXY_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
S3PROXY_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
S3PROXY_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
S3PROXY_MTLS_AUTHORIZED_CERTS=*.clients.s3proxy.example.com