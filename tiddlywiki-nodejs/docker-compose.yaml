version: "3.9"

volumes:
  static:
  data:
  s3-proxy-config:

networks:
  logging:
    ipam:
      config:
        - subnet: ${TIDDLYWIKI_LOGGING_SUBNET_PREFIX:-172.45.17}.0/24

services:
  tiddlywiki-static:
    build:
      context: static
    volumes:
      - static:/www:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}.rule=Host(`${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}`)"
      - "traefik.http.routers.tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}.entrypoints=websecure"
      - "traefik.http.routers.tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}.middlewares=tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-whitelist"
      #! Middlewares
      #! IP filter:
      - "traefik.http.middlewares.tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-whitelist.ipwhitelist.sourcerange=${TIDDLYWIKI_PUBLIC_IP_SOURCERANGE}"

      #! /logout/logged_out:
      - "traefik.http.routers.tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logged-out.rule=Host(`${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}`) && Path(`/logout/logged_out.html`)"
      - "traefik.http.routers.tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logged-out.entrypoints=websecure"

  config:
    build:
      context: config
      args:
        TIDDLYWIKI_NODEJS_CONFIG_YTT_VERSION: ${TIDDLYWIKI_NODEJS_CONFIG_YTT_VERSION:-v0.44.0}
    environment:
      - TIDDLYWIKI_NODEJS_PLUGINS=${TIDDLYWIKI_NODEJS_PLUGINS}

    volumes:
      - data:/tiddlywiki

  tiddlywiki-nodejs:
    build:
      context: tiddlywiki
      args:
        TIDDLYWIKI_NODEJS_VERSION: ${TIDDLYWIKI_NODEJS_VERSION}
        TIDDLYWIKI_NODEJS_TIDDLYMAP_VERSION: ${TIDDLYWIKI_NODEJS_TIDDLYMAP_VERSION}
    depends_on:
      - config
      - watcher
    environment:
      - TIDDLYWIKI_NODEJS_INSTANCE=${TIDDLYWIKI_NODEJS_INSTANCE:-default}
    security_opt:
      - no-new-privileges:true
    # cap_drop:
    #   - ALL
    # cap_add:
    #   - CHOWN
    #   - SETGID
    #   - SETUID
    #   - DAC_OVERRIDE
    #   - FOWNER
    #   - FSETID
    #   # - MKNOD
    #   # - NET_RAW
    #   # - SETFCAP
    #   # - SETPCAP
    #   - NET_BIND_SERVICE
    #   # - SYS_CHROOT
    #   # - KILL
    #   # - AUDIT_WRITE
    volumes:
      - data:/tiddlywiki
    restart: unless-stopped
    command:
      - /tiddlywiki
      - --listen
      - host=0.0.0.0
    networks:
      logging:
        ipv4_address: ${TIDDLYWIKI_LOGGING_SUBNET_PREFIX:-172.45.17}.3
    logging:
      driver: syslog
      options:
        syslog-address: "udp://${TIDDLYWIKI_LOGGING_SUBNET_PREFIX:-172.45.17}.2:2000"
        syslog-format: "rfc5424"
    labels:
      - "traefik.enable=true"
      #! Access requires HTTP Basic Auth:
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}.rule=Host(`${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}`) && (HeadersRegexp(`Authorization`,`.+`) || Path(`/login`)) && !PathPrefix(`/logout`) && !PathPrefix(`/s3-proxy`)"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}.entrypoints=websecure"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}.middlewares=tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-whitelist,tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-auth,tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-login-redirect,tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-redirect"
      #! Middlewares
      #! IP filter:
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-whitelist.ipwhitelist.sourcerange=${TIDDLYWIKI_NODEJS_IP_SOURCERANGE}"
      #! Authentication:
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-auth.basicauth.users=${TIDDLYWIKI_NODEJS_HTTP_AUTH}"
      #! Redirect /login back to /
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-login-redirect.redirectregex.regex=^https://${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}/login"
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-login-redirect.redirectregex.replacement=https://${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}/"

      #! Redirect /logout to /logout/clear
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout.rule=Host(`${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}`) && Path(`/logout`)"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout.entrypoints=websecure"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout.middlewares=tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-auth,tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-redirect"
      #! This dummy password simply overwrites the logging out users other password.
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-redirect.redirectregex.regex=^https://${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}/logout"
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-redirect.redirectregex.replacement=https://logmeout:logmeout@${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}/logout/clear"


      #! /logout/clear
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-clear.rule=Host(`${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}`) && Path(`/logout/clear`)"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-clear.entrypoints=websecure"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-clear.middlewares=tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-auth,tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-clear-redirect"
      #! This is the hardcoded logout password: "logmeout"
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-auth.basicauth.users=logmeout:$$apr1$$lAbWjVMX$$7PWdAzaa/LNRUY8kSad95/"
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-clear-redirect.redirectregex.regex=^https://${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}/logout/clear"
      - "traefik.http.middlewares.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-logout-clear-redirect.redirectregex.replacement=https://${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}/logout/logged_out.html"


  watcher:
    build:
      context: watcher
      args:
        TIDDLYWIKI_NODEJS_VERSION: ${TIDDLYWIKI_NODEJS_VERSION}
        TIDDLYWIKI_NODEJS_TIDDLYMAP_VERSION: ${TIDDLYWIKI_NODEJS_TIDDLYMAP_VERSION}
    environment:
      TIDDLYWIKI_HOST: ${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}
      S3_ACCESS_KEY_ID: ${TIDDLYWIKI_NODEJS_S3_ACCESS_KEY_ID}
      S3_SECRET_KEY: ${TIDDLYWIKI_NODEJS_S3_SECRET_KEY}
      S3_ENDPOINT: ${TIDDLYWIKI_NODEJS_S3_ENDPOINT}
      S3_BUCKET: ${TIDDLYWIKI_NODEJS_S3_BUCKET}
      TIDDLYWIKI_PUBLIC_DEFAULT_TIDDLERS: "${TIDDLYWIKI_PUBLIC_DEFAULT_TIDDLERS:-[tag[Journal]!sort[created]limit[10]]}"
      TIDDLYWIKI_PUBLIC_ALLOWED_TAGS: ${TIDDLYWIKI_PUBLIC_ALLOWED_TAGS}
    volumes:
      - data:/tiddlywiki
      - static:/www
    networks:
      logging:
        ipv4_address: ${TIDDLYWIKI_LOGGING_SUBNET_PREFIX:-172.45.17}.2

  s3-proxy-config:
    build:
      context: s3-proxy-config
    security_opt:
      - no-new-privileges:true
    environment:
      - S3_ENDPOINT=${TIDDLYWIKI_NODEJS_S3_ENDPOINT}
      - S3_BUCKET=${TIDDLYWIKI_NODEJS_S3_BUCKET}
      - S3_ACCESS_KEY_ID=${TIDDLYWIKI_NODEJS_S3_ACCESS_KEY_ID}
      - S3_SECRET_KEY=${TIDDLYWIKI_NODEJS_S3_SECRET_KEY}
      - PRINT_CONFIG
    volumes:
      - s3-proxy-config:/proxy/conf

  s3-proxy:
    depends_on: ['s3-proxy-config']
    build:
      context: https://github.com/EnigmaCurry/s3-proxy.git#self-buildable
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - s3-proxy-config:/proxy/conf
    labels:
      - "traefik.enable=true"
      ## Public:
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-s3proxy-public.rule=Host(`${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}`) && PathPrefix(`/s3-proxy`) && Method(`GET`)"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-s3proxy-public.entrypoints=websecure"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-s3proxy-public.middlewares=tiddlywiki-static-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-whitelist,tiddlywiki-nodejs-s3proxy-stripprefix,tiddlywiki-nodejs-s3proxy-addprefix"
      ## Private:
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-s3proxy-private.rule=Host(`${TIDDLYWIKI_NODEJS_TRAEFIK_HOST}`) && PathPrefix(`/s3-proxy`) && Method(`GET`) && HeadersRegexp(`Authorization`,`.+`)"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-s3proxy-private.entrypoints=websecure"
      - "traefik.http.routers.tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-s3proxy-private.middlewares=tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-whitelist,tiddlywiki-nodejs-${TIDDLYWIKI_NODEJS_INSTANCE:-default}-auth,tiddlywiki-nodejs-s3proxy-stripprefix,tiddlywiki-nodejs-s3proxy-addprefix"

      ## Middlewares:
      - "traefik.http.middlewares.tiddlywiki-nodejs-s3proxy-stripprefix.stripprefix.prefixes=/s3-proxy"
      - "traefik.http.middlewares.tiddlywiki-nodejs-s3proxy-stripprefix.stripprefix.forceSlash=false"
      - "traefik.http.middlewares.tiddlywiki-nodejs-s3proxy-addprefix.addprefix.prefix=/tiddlywiki/files"
