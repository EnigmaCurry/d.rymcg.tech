TIDDLYWIKI_NODEJS_TRAEFIK_HOST=wiki.example.com
TIDDLYWIKI_NODEJS_INSTANCE=

TIDDLYWIKI_NODEJS_VERSION=5.2.3
TIDDLYWIKI_NODEJS_TIDDLYMAP_VERSION=0.17.15
TIDDLYWIKI_NODEJS_SHIRAZ_VERSION=2.7.0
TIDDLYWIKI_NODEJS_TRASHBIN_VERSION=1.2.3
TIDDLYWIKI_NODEJS_DATEPICKER_VERSION=0.5.2
TIDDLYWIKI_NODEJS_MOMENT_VERSION=2.17.0

DOCKER_COMPOSE_PROFILES=default

# HTTP Basic Auth
TIDDLYWIKI_NODEJS_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Gitea server can log into your app and
# have full access.
TIDDLYWIKI_NODEJS_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
TIDDLYWIKI_NODEJS_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
TIDDLYWIKI_NODEJS_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
TIDDLYWIKI_NODEJS_MTLS_AUTHORIZED_CERTS=*.clients.tiddlywiki.example.com

## The private site is available from any IP address by default:
## (Because the server is protected by Traefik sentry authorization.)
TIDDLYWIKI_NODEJS_IP_SOURCERANGE=0.0.0.0/0
## But the unauthenticated public static site is disabled to all IPs by default:
TIDDLYWIKI_PUBLIC_IP_SOURCERANGE=0.0.0.0/32

TIDDLYWIKI_NODEJS_NGINX_SERVER_NAME=tidlywiki
TIDDLYWIKI_NODEJS_NGINX_UID=54321
TIDDLYWIKI_NODEJS_NGINX_GID=54321

## There needs to be some static IP address for the syslog service
## Since the Docker daemon is the one doing the logging, it cannot use the container DNS.
## This creates a unique static subnet for the logging network:
## Specify just the first three octets of the /24 network:
TIDDLYWIKI_LOGGING_SUBNET_PREFIX=172.45.17

## S3 Storage Provider:
TIDDLYWIKI_NODEJS_EXTERNAL_CANONICAL_URI=
TIDDLYWIKI_NODEJS_S3_BUCKET=
TIDDLYWIKI_NODEJS_S3_ENDPOINT=
TIDDLYWIKI_NODEJS_S3_ACCESS_KEY_ID=
TIDDLYWIKI_NODEJS_S3_SECRET_KEY=


## The filter of the tiddlers to list on the main page:
TIDDLYWIKI_PUBLIC_DEFAULT_TIDDLERS=[tag[Public]!sort[created]limit[10]]
## The list of tags allowed for publishing:
TIDDLYWIKI_PUBLIC_ALLOWED_TAGS=Public,public

# Path to local backup directory (make backup):
TIDDLYWIKI_NODEJS_LOCAL_BACKUP_DIR=backup

# Optional plugins to enable:
## Full list to choose from:
#TIDDLYWIKI_NODEJS_PLUGINS=markdown,tiddlymap,reveal-js,shiraz,trashbin,datepicker
TIDDLYWIKI_NODEJS_PLUGINS=
