# The docker image to use (https://hub.docker.com/r/nicolargo/glances/tags):
GLANCES_IMAGE=nicolargo/glances:4.3.3

# The domain name for the glances service:
GLANCES_TRAEFIK_HOST=glances.example.com

# The name of this instance. If there is only one instance, use 'default'.
GLANCES_INSTANCE=

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
GLANCES_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
GLANCES_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Forgejo server can log into your app and
# have full access.
GLANCES_OAUTH2=false
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
GLANCES_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
GLANCES_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
GLANCES_MTLS_AUTHORIZED_CERTS=*.clients.glances.example.com

# Timezone (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
GLANCES_TZ=America/New_York

# Nvidia GPU support
GLANCES_GPU=false

# Set to "true" to allow Glances access to the host's Docker socket, which will
# allow Glances to report on metrics for containers. Or set to "false" to
# disallow access to the host's Docker socket. Be aware that allowing access to
# the Docker socket is not safe because it effectively grants full control over
# the Docker daemon, enabling a container or attacker to escalate privileges,
# manipulate containers, and potentially compromise the host system.
GLANCES_CONTAINER_METRICS=false

# Set to "true" to have the Glances container bind mount `/` on the host so
# that Glances can report on disk space available on the host, or set to "false".
GLANCES_MOUNT_HOST_FILESYSTEM=false

# Glances server runtime options
# See: https://glances.readthedocs.io/en/develop/cmds.html#command-line-options
GLANCES_OPTIONS="-t 2"

# META:
# PREFIX=GLANCES

