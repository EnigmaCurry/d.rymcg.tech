version: "3.3"

networks:
  traefik-proxy:
    name: traefik-proxy
  traefik-wireguard:
    name: traefik-wireguard
  traefik-mail:
    name: traefik-mail

volumes:
  traefik:
  
services:
  traefik:
    build:
      context: .
      args:
        TRAEFIK_IMAGE: ${TRAEFIK_IMAGE}
        BLOCKPATH_MODULE: github.com/traefik/plugin-blockpath
        BLOCKPATH_GIT_BRANCH: master
    container_name: "traefik"
    restart: unless-stopped
    networks:
      traefik-proxy:
        ipv4_address: ${TRAEFIK_PROXY_SUBNET_IP}
      traefik-wireguard:
        ipv4_address: ${TRAEFIK_WIREGUARD_SUBNET_IP}
      traefik-mail:
        ipv4_address: ${TRAEFIK_MAIL_SUBNET_IP}
    security_opt:
      - no-new-privileges:true
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-proxy"
      ## Entrypoints:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.vpn.address=${TRAEFIK_WIREGUARD_SUBNET_IP}:442"
      - "--entrypoints.mqtt.address=:8883"
      - "--entrypoints.ssh.address=:2222"
      - "--entrypoints.traefik.address=${TRAEFIK_WIREGUARD_SUBNET_IP}:8080"
      #- "--entrypoints.dns.address=:53"
      ## Automatically redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      ## ACME TLS Challenge (Let's Encrypt):
      - "--certificatesresolvers.production.acme.tlschallenge=true"
      - "--certificatesresolvers.staging.acme.tlschallenge=true"
      - "--certificatesresolvers.production.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.staging.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.production.acme.email=${ACME_CA_EMAIL}"
      - "--certificatesresolvers.staging.acme.email=${ACME_CA_EMAIL}"
      - "--certificatesresolvers.production.acme.storage=/data/acme-production.json"
      - "--certificatesresolvers.staging.acme.storage=/data/acme-staging.json"
      ## Enable Dashboard available only from the docker localhost:8080 (password required)
      - "--api.dashboard=true"
      ## Load local plugins that have been bundled into the traefik image:
      - "--experimental.localPlugins.blockpath.modulename=github.com/traefik/plugin-blockpath"
      ## ip whitelist vpn endpoint access from traefik-wireguard network only (HTTP):
      - "--entrypoints.vpn.http.middlewares=vpn-ipwhitelist@docker"
      ## ip whitelist vpn endpoint access from traefik-wireguard network only (TCP):
      ### Why can't I specify a tcp middleware on the entrypoint??
      ##- "--entrypoints.vpn.tcp.middlewares=vpn-ipwhitelist@docker"
    ports:
      #- "53:53"
      - "80:80"
      - "443:443"
      - "8883:8883"
      - "2222:2222"
    volumes:
      - "traefik:/data"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      ## Require HTTP Basic Auth for api and dashboard which runs only on the
      ## traefik endpoint (unexposed port 8080):
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      - "traefik.http.routers.api.entrypoints=traefik"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=traefik-api-ipwhitelist@docker,traefik-dashboard-auth"
      - "traefik.http.middlewares.traefik-dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
      - "traefik.http.middlewares.traefik-api-ipwhitelist.ipwhitelist.sourcerange=${TRAEFIK_WIREGUARD_SUBNET}"
      - "traefik.tcp.middlewares.traefik-api-ipwhitelist.ipwhitelist.sourcerange=${TRAEFIK_WIREGUARD_SUBNET}"

      ## VPN sourcerange filter:
      - "traefik.http.middlewares.vpn-ipwhitelist.ipwhitelist.sourcerange=${TRAEFIK_WIREGUARD_SUBNET}"
      - "traefik.tcp.middlewares.vpn-ipwhitelist.ipwhitelist.sourcerange=${TRAEFIK_WIREGUARD_SUBNET}"
