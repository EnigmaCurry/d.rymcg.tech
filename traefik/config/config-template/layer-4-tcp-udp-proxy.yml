#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")

#@ tcp_udp_proxy_enabled = data.values.layer_4_tcp_udp_proxy_enabled == "true"
#@ tcp_udp_proxy_routes = data.values.layer_4_tcp_udp_proxy_routes
#@ custom_entrypoints = data.values.custom_entrypoints
#@ udp_entrypoints = [e.split(":")[0] for e in custom_entrypoints.split(",") if len(e) and e.split(":")[3] == "udp"]
#@ config = struct.decode(data.values)


#@yaml/text-templated-strings
#@ if tcp_udp_proxy_enabled and len(tcp_udp_proxy_routes):
tcp:
  services:
    #@ for route in tcp_udp_proxy_routes.split(","):
    #@ entrypoint, dest_ip, dest_port, proxy_protocol = route.split(":")
    #@ if entrypoint in udp_entrypoints:
    #@  continue
    #@ end
    #@ service = "{}-layer-4-proxy".format(entrypoint)
    (@= service @):
      loadBalancer:
        #@ if int(proxy_protocol) > 0:
        proxyProtocol:
          version: 2
        #@ end
        servers:
          - address: "(@= dest_ip @):(@= dest_port @)"
    #@ end
  routers:
    #@ for route in tcp_udp_proxy_routes.split(","):
    #@ entrypoint = route.split(":")[0]
    #@ service = "{}-layer-4-proxy".format(entrypoint)
    #@ if entrypoint in udp_entrypoints:
    #@  continue
    #@ end
    (@= service @)-proxy:
      entryPoints:
        - "(@= entrypoint @)"
      rule: "HostSNI(`*`)"
      service: "(@= service @)"
    #@ end
#@ end
