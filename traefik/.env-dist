## Traefik docker image:
TRAEFIK_IMAGE=traefik:v3.1

## Log levels: error, warn, info, debug
TRAEFIK_LOG_LEVEL=warn

## Print configuration on startup into docker logs:
TRAEFIK_CONFIG_VERBOSE=false

## Traefik uses the host networking by default: TRAEFIK_NETWORK_MODE=host
## Or use a sidecar service like a VPN server: TRAEFIK_NETWORK_MODE=service:wireguard
## Or use a sidecar service like a VPN client: TRAEFIK_NETWORK_MODE=service:wireguard-client
TRAEFIK_NETWORK_MODE=host

## Enable optional docker-compose profiles: default,error_pages,geoip_update,wireguard,wireguard-client
DOCKER_COMPOSE_PROFILES=default,error_pages

## DOCKER_CONTEXT is used to render context specific config from config/context-template
## DOCKER_CONTEXT is needed only inside the config container:
DOCKER_CONTEXT=

## Traefik container user is matched to a real host user/group:
TRAEFIK_USER=traefik
TRAEFIK_UID=61524
TRAEFIK_GID=61524
## Traefik also needs to know the real host Docker group id:
TRAEFIK_DOCKER_GID=999

## Enable dashboard:
TRAEFIK_DASHBOARD_ENTRYPOINT_ENABLED=false
## Enter htpasswd encoded username/password for accessing the dashboard
## Run `make config` to automatically fill this in
TRAEFIK_DASHBOARD_HTTP_AUTH=
TRAEFIK_DASHBOARD_ENTRYPOINT_PORT=8080
TRAEFIK_DASHBOARD_ENTRYPOINT_HOST=127.0.0.1

## Enable access logs or not:
## https://doc.traefik.io/traefik/observability/access-logs/
TRAEFIK_ACCESS_LOGS_ENABLED=false
TRAEFIK_ACCESS_LOGS_PATH=/data/access.log

## Send anonymous usage stats to Traefik Labs (opt-in by setting this true)
## https://doc.traefik.io/traefik/contributing/data-collection
TRAEFIK_SEND_ANONYMOUS_USAGE=false

## Error page templates server
TRAEFIK_ERROR_PAGES_ENABLED=true
TRAEFIK_ERROR_PAGES_IMAGE=tarampampam/error-pages:2.25.0
TRAEFIK_ERROR_PAGES_TEMPLATE=matrix

## Default root domain name
TRAEFIK_ROOT_DOMAIN=example.com

## ACME Challenge (Let's Encrypt)
TRAEFIK_ACME_ENABLED=false
## Enter your email address for Let's Encrypt (optional, can be blank):
TRAEFIK_ACME_CA_EMAIL=
## Choose to use `tls` (TLS-ALPN-01) or `dns` (DNS-01) challenge types.
TRAEFIK_ACME_CHALLENGE=tls
## Choose duration for certificate renewal (in hours)
## You should choose a lower delay if your CA does things more quickly than that.
TRAEFIK_ACME_CERTIFICATES_DURATION=2160

## DNS-01 ACME Challenge (this is ignored if TRAEFIK_ACME_CHALLENGE=tls)
## Find your DNS provider: https://doc.traefik.io/traefik/https/acme/#providers
TRAEFIK_ACME_DNS_PROVIDER=digitalocean
## List the variable *names* needed for your DNS provider (up to 5 variable names):
## Example of DO_AUTH_TOKEN is appropriate for DigitalOcean DNS only:
TRAEFIK_ACME_DNS_VARNAME_1=DO_AUTH_TOKEN
TRAEFIK_ACME_DNS_VARNAME_2=
TRAEFIK_ACME_DNS_VARNAME_3=
TRAEFIK_ACME_DNS_VARNAME_4=
TRAEFIK_ACME_DNS_VARNAME_5=
## Set the provider specific *values* for the same variable names set above:
DO_AUTH_TOKEN=your-actual-digitalocean-token-here
AWS_ACCESS_KEY_ID=
AWS_REGION=
AWS_SECRET_ACCESS_KEY=

## All of the domains that should receive a TLS certificate are stored
## in the TRAEFIK_ACME_CERT_DOMAINS variable as a JSON list. This
## variable is managed interactively by the `make certs` Makefile
## target. Each item in the list contains a MAIN domain and a sublist
## of SANS domains, which may include wildcards.
TRAEFIK_ACME_CERT_DOMAINS=[]
## Choose ACME 'production' or 'staging' resolver, and enter the correct endpoint:
TRAEFIK_ACME_CERT_RESOLVER=production
TRAEFIK_ACME_CERT_RESOLVER_PRODUCTION=https://acme-v02.api.letsencrypt.org/directory
TRAEFIK_ACME_CERT_RESOLVER_STAGING=https://acme-staging-v02.api.letsencrypt.org/directory

## Step CA certresolver
TRAEFIK_STEP_CA_ENABLED=false
## Enter the URL to your Step-CA server endpoint:
TRAEFIK_STEP_CA_ENDPOINT=https://ca.example.com
## Enter your Step-CA certificate fingerprint:
TRAEFIK_STEP_CA_FINGERPRINT=xxxxxxxxxxxxxxxxxxxx
## Clean all other CA certs from the system, or not:
TRAEFIK_STEP_CA_ZERO_CERTS=false

## https://github.com/vmware-tanzu/carvel-ytt/releases
TRAEFIK_CONFIG_YTT_VERSION=v0.49.1

## Enable File provider:
## https://doc.traefik.io/traefik/providers/file/
TRAEFIK_FILE_PROVIDER=true
## https://doc.traefik.io/traefik/providers/file/#watch
TRAEFIK_FILE_PROVIDER_WATCH=false

## Enable Docker provider:
## https://doc.traefik.io/traefik/providers/docker/
TRAEFIK_DOCKER_PROVIDER=true
## Constraints for which containers will use this instance of Traefik:
## https://doc.traefik.io/traefik/providers/docker/#constraints  (blank for none)
TRAEFIK_DOCKER_PROVIDER_CONSTRAINTS=

## Enable Traefik plugins:
TRAEFIK_PLUGINS=true
## Enable the blockpath plugin:
TRAEFIK_PLUGIN_BLOCKPATH=true
TRAEFIK_BLOCKPATH_MODULE=github.com/enigmacurry/traefik-blockpath-plugin
## Referer plugin:
TRAEFIK_PLUGIN_REFERER=true
TRAEFIK_REFERER_MODULE=github.com/enigmacurry/traefik-referer-plugin
## MaxMind GeoIP database:
## Create a free account and license key: https://www.maxmind.com/en/geolite2/signup
TRAEFIK_PLUGIN_MAXMIND_GEOIP=false
TRAEFIK_GEOIP_MODULE=github.com/enigmacurry/traefik-geoip2-plugin
TRAEFIK_GEOIPUPDATE_ACCOUNT_ID=
TRAEFIK_GEOIPUPDATE_LICENSE_KEY=
TRAEFIK_GEOIPUPDATE_EDITION_IDS=GeoLite2-ASN GeoLite2-City GeoLite2-Country
## Header Authorization (authorization in addition to traefik-forward-auth):
TRAEFIK_PLUGIN_HEADER_AUTHORIZATION=true
TRAEFIK_HEADER_AUTHORIZATION_MODULE=github.com/enigmacurry/traefik-header-authorization
## Cert auth (mTLS)
TRAEFIK_PLUGIN_CERT_AUTH=true
TRAEFIK_CERT_AUTH_MODULE=github.com/enigmacurry/traefik-certauthz
## mTLS Header
TRAEFIK_PLUGIN_MTLS_HEADER=true
TRAEFIK_MTLS_HEADER_MODULE=github.com/enigmacurry/traefik-plugin-mtls-header

## Entrypoints:
## Traefik web entrypoint (only used for redirecting to websecure entrypoint)
TRAEFIK_WEB_ENTRYPOINT_ENABLED=true
TRAEFIK_WEB_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_WEB_ENTRYPOINT_PORT=80
TRAEFIK_WEB_ENTRYPOINT_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik websecure entrypoint for all public TLS traffic
TRAEFIK_WEBSECURE_ENTRYPOINT_ENABLED=true
TRAEFIK_WEBSECURE_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_WEBSECURE_ENTRYPOINT_PORT=443
TRAEFIK_WEBSECURE_ENTRYPOINT_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik web_plain entrypoint for all explicitly unencrypted non-TLS HTTP:
TRAEFIK_WEB_PLAIN_ENTRYPOINT_ENABLED=false
TRAEFIK_WEB_PLAIN_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_WEB_PLAIN_ENTRYPOINT_PORT=8000
TRAEFIK_WEB_PLAIN_ENTRYPOINT_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik MQTT entrypoint
TRAEFIK_MQTT_ENTRYPOINT_ENABLED=false
TRAEFIK_MQTT_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_MQTT_ENTRYPOINT_PORT=8883
TRAEFIK_MQTT_ENTRYPOINT_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik SSH entrypoint
TRAEFIK_SSH_ENTRYPOINT_ENABLED=false
TRAEFIK_SSH_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_SSH_ENTRYPOINT_PORT=2222
TRAEFIK_SSH_ENTRYPOINT_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik XMPP entrypoints:
TRAEFIK_XMPP_C2S_ENTRYPOINT_ENABLED=false
TRAEFIK_XMPP_C2S_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_XMPP_C2S_ENTRYPOINT_PORT=5222
TRAEFIK_XMPP_C2S_PROXY_PROTOCOL_TRUSTED_IPS=
TRAEFIK_XMPP_S2S_ENTRYPOINT_ENABLED=false
TRAEFIK_XMPP_S2S_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_XMPP_S2S_ENTRYPOINT_PORT=5269
TRAEFIK_XMPP_S2S_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik MPD entrypoint
TRAEFIK_MPD_ENTRYPOINT_ENABLED=false
TRAEFIK_MPD_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_MPD_ENTRYPOINT_PORT=6600
TRAEFIK_MPD_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik SNAPCAST (audio) entrypoint
TRAEFIK_SNAPCAST_ENTRYPOINT_ENABLED=false
TRAEFIK_SNAPCAST_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_SNAPCAST_ENTRYPOINT_PORT=1704
TRAEFIK_SNAPCAST_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik SNAPCAST (control) entrypoint
TRAEFIK_SNAPCAST_CONTROL_ENTRYPOINT_ENABLED=false
TRAEFIK_SNAPCAST_CONTROL_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_SNAPCAST_CONTROL_ENTRYPOINT_PORT=1705
TRAEFIK_SNAPCAST_CONTROL_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik Redis entrypoint
TRAEFIK_REDIS_ENTRYPOINT_ENABLED=false
TRAEFIK_REDIS_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_REDIS_ENTRYPOINT_PORT=6380
TRAEFIK_REDIS_PROXY_PROTOCOL_TRUSTED_IPS=
## Traefik RTMP entrypoint
TRAEFIK_RTMP_ENTRYPOINT_ENABLED=false
TRAEFIK_RTMP_ENTRYPOINT_HOST=0.0.0.0
TRAEFIK_RTMP_ENTRYPOINT_PORT=1935
TRAEFIK_RTMP_PROXY_PROTOCOL_TRUSTED_IPS=
TRAEFIK_RTMP_ENTRYPOINT_PROXY_PROTOCOL_TRUSTED_IPS=

## User custom entrypoints (tcp and/or udp):
### TRAEFIK_CUSTOM_ENTRYPOINTS is a comma separated list of 6-tuples:
####  entrypoint_name:listen_host:listen_port:protocol:trusted_proxies:use_https,...
### TRAEFIK_CUSTOM_ENTRYPOINTS=telnet:0.0.0.0:23:tcp::false,dns:10.13.16.1:53:udp:127.0.0.1/32:false
### trusted_proxies is a dash separated list of trusted upstream proxies CIDR.
TRAEFIK_CUSTOM_ENTRYPOINTS=

## Wireguard VPN server:
TRAEFIK_VPN_ENABLED=false
TRAEFIK_VPN_HOST=vpn.example.com
TRAEFIK_VPN_ADDRESS=10.13.16.1
TRAEFIK_VPN_PORT=51820
TRAEFIK_VPN_PEERS=client1,client2
TRAEFIK_VPN_SUBNET=10.13.16.0
## Note: `make config` will derive and reset TRAEFIK_VPN_ALLOWED_IPS based upon TRAEFIK_VPN_SUBNET.
## It is not recommended to change this to anything other than ${TRAEFIK_VPN_SUBNET}/24.
TRAEFIK_VPN_ALLOWED_IPS=10.13.16.0/24

## Wireguard VPN client:
TRAEFIK_VPN_CLIENT_ENABLED=false
TRAEFIK_VPN_CLIENT_INTERFACE_ADDRESS=10.13.16.2
TRAEFIK_VPN_CLIENT_INTERFACE_PRIVATE_KEY=
TRAEFIK_VPN_CLIENT_INTERFACE_LISTEN_PORT=51820
TRAEFIK_VPN_CLIENT_PEER_PUBLIC_KEY=
TRAEFIK_VPN_CLIENT_PEER_PRESHARED_KEY=
TRAEFIK_VPN_CLIENT_PEER_ENDPOINT=
TRAEFIK_VPN_CLIENT_PEER_ALLOWED_IPS=10.13.16.1/32
TRAEFIK_VPN_CLIENT_PEER_SERVICES=

## Custom error page handlers (redbean):
TRAEFIK_ERROR_HANDLER_403_SERVICE=
TRAEFIK_ERROR_HANDLER_404_SERVICE=
TRAEFIK_ERROR_HANDLER_500_SERVICE=

## Configure header authorization middlewares.
## Define this as a JSON formatted string of a map of group names:
## TRAEFIK_HEADER_AUTHORIZATION_GROUPS={"admin": ["root@localhost"], "users": ["root@localhost","ryan@localhost"]}
TRAEFIK_HEADER_AUTHORIZATION_GROUPS={}

## Layer 7 TLS proxy
## Use this Traefik instance to forward to another server, with TLS passthrough.
TRAEFIK_LAYER_7_TLS_PROXY_ENABLED=false
## Configure the routes to forward:
##  * The protocol must be TLS (so it must be TCP, but it need not be HTTP).
##  * The destination service must use its own TLS certificate, to be passed through the proxy.
##  * The public DNS for each route must match the IP address of this Traefik instance.
##  * The public TCP port must be 443, but the destination server TCP port can be anything.
## Proxy routes are a comma separated list of 4-tuples: domain:ip_address:port:proxy_protocol,...
### TRAEFIK_LAYER_7_TLS_PROXY_ROUTES=www.example.com:10.13.16.2:443:2,time.example.org:10.13.16.5:8443:0
### proxy_protocol is the version of Proxy Protocol to enable. 0 means disabled.
TRAEFIK_LAYER_7_TLS_PROXY_ROUTES=

## Layer 4 TCP/UDP proxy
## Use this Traefik instance to forward TCP/UDP to other servers.
TRAEFIK_LAYER_4_TCP_UDP_PROXY_ENABLED=false
## Configure the routes to forward:
## Proxy routes are a comma separated list of 4-tuples: domain:ip_address:port:proxy_protocol,...
### TRAEFIK_LAYER_4_TCP_UDP_PROXY_ROUTES=telnet:10.13.16.2:23:0
TRAEFIK_LAYER_4_TCP_UDP_PROXY_ROUTES=

## Metrics
## https://doc.traefik.io/traefik/observability/metrics/prometheus/
TRAEFIK_METRICS_PROMETHEUS_ENABLE=false
TRAEFIK_METRICS_PROMETHEUS_BUCKETS=0.1,0.3,1.2,5.0
TRAEFIK_METRICS_PROMETHEUS_ADD_ENTRYPOINTS_LABELS=true
TRAEFIK_METRICS_PROMETHEUS_ADD_ROUTERS_LABELS=false
TRAEFIK_METRICS_PROMETHEUS_ADD_SERVICES_LABELS=true
TRAEFIK_METRICS_PROMETHEUS_HEADER_LABELS=host=Host,user_agent=User-Agent,x_real_ip=X-Real-IP,x_forwarded_user=X-Forwarded-User,geoip_city=X-Geoip2-City,geoip_region=X-Geoip2-Region,geoip_city=X-Geoip2-City
