version: '3'

services:
  postgres:
    image: postgres:14
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]

  postgres_backup:
    build:
      context: ${BACKUP_POSTGRES_GIT_SRC}
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DATABASE=all
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - S3_ACCESS_KEY_ID=${BACKUP_S3_KEY}
      - S3_SECRET_ACCESS_KEY=${BACKUP_S3_SECRET}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - S3_PREFIX=${NEXTCLOUD_TRAEFIK_HOST}/postgres
      - S3_ENDPOINT=https://${BACKUP_S3_HOST}
      - S3_S3V4=yes
      - SCHEDULE=${DATABASE_BACKUP_SCHEDULE}
      - ENCRYPTION_PASSWORD=${BACKUP_ENCRYPTION_PASSWORD}

  redis:
    image: redis:alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    restart: always

  app:
    image: nextcloud:apache
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - data:/var/www/html
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=redis
      - OBJECTSTORE_S3_BUCKET
      - OBJECTSTORE_S3_SSL=true
      - OBJECTSTORE_S3_USEPATH_STYLE=true
      - OBJECTSTORE_S3_AUTOCREATE=true
      - OBJECTSTORE_S3_KEY
      - OBJECTSTORE_S3_SECRET
      - OBJECTSTORE_S3_HOST
      - OBJECTSTORE_S3_PORT=443
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud-${NEXTCLOUD_INSTANCE:-default}.rule=Host(`${NEXTCLOUD_TRAEFIK_HOST}`)"
      - "traefik.http.routers.nextcloud-${NEXTCLOUD_INSTANCE:-default}.entrypoints=websecure"
      - "traefik.http.middlewares.nextcloud-${NEXTCLOUD_INSTANCE:-default}-ipwhitelist.ipwhitelist.sourcerange=${NEXTCLOUD_IP_SOURCERANGE}"
      - "traefik.http.routers.nextcloud-${NEXTCLOUD_INSTANCE:-default}.middlewares=nextcloud-${NEXTCLOUD_INSTANCE:-default}-ipwhitelist"
      # the following were intended to allow dav discovery in nextcloud, but didn't work
      #- "traefik.frontend.redirect.permanent='true'"
      #- "traefik.frontend.redirect.regex='https://(.*)/.well-known/(card|cal)dav'"
      #- "traefik.frontend.redirect.replacement='https://$$1/remote.php/dav/'"

  data_backup:
    hostname: data_backup
    restart: unless-stopped
    build:
      context: data_backup
    volumes:
      - data:/data
    environment:
      ## See https://github.com/lobaro/restic-backup-docker#environment-variables
      - RESTIC_REPOSITORY=s3:https://${BACKUP_S3_HOST}/${BACKUP_S3_BUCKET}/${NEXTCLOUD_TRAEFIK_HOST}/data
      - RESTIC_PASSWORD=${BACKUP_ENCRYPTION_PASSWORD}
      - BACKUP_CRON=${APP_BACKUP_SCHEDULE}
      - AWS_ACCESS_KEY_ID=${BACKUP_S3_KEY}
      - AWS_SECRET_ACCESS_KEY=${BACKUP_S3_SECRET}
      - RESTIC_FORGET_ARGS=--prune --keep-daily 7 --keep-weekly 4 --keep-monthly 6 --keep-yearly 3

  cron:
    image: nextcloud:apache
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    volumes:
      - data:/var/www/html
    entrypoint: /cron.sh
    depends_on:
      - postgres
      - redis

volumes:
  postgres:
  data:
