## host: am_adam*0.5 + am_puck*0.3 + am_fenrir*0.1 + am_onyx*0.1
## guest: af_heart*0.8 + af_alloy*0.2

## d.rymcg.tech=dee dot rye mcgee dot tech
## Traefik=tray-fik
## WireGuard=wire guard
## Step-CA=step see eh
## acme-dns=acme d n s
## OAuth=oh auth
## mTLS=em tee ell ess
## DNS=dee en ess
## TLS=tee ell ess
## PKI=pee kay eye
## CLI=see ell eye
## SSH=ess ess aitch
## CA=see eh
## live=liv
## Self-Hoster=self hoseter
## self-hosters=self hoseters
## .env=dot ENV

# host
Welcome back to Self-Host FM, where we talk all about running your own web server. Today we are diving into d.rymcg.tech. It is a collection of open-source Docker Compose projects and CLI tools that let you manage remote Docker services from your workstation.

# guest
The headline is flexibility. You can deploy Docker on a cloud server like a DigitalOcean droplet or AWS EC2. You can run at home with simple port forwarding. You can keep a private server behind WireGuard. You can even use a roaming machine with no open ports by reaching it through a public sentry VPN.

# host
There is a clean split between workstation and server. All source files and administration live on your workstation. You rarely need to SSH into the server. One workstation can command several servers with the same tooling.

# guest
Configuration is just environment variables in .env files. Each deployment has its own .env_{CONTEXT}_{INSTANCE} file per project, per context, per instance. Production, staging, and home lab stay neatly isolated.

# host
Every sub-project ships a Makefile with consistent targets. Use make config to run a setup wizard. Use make install to deploy. Use make open to launch the app in your browser. Use make uninstall to remove containers but keep data. Use make destroy to wipe the data volumes. Use make readme to open the docs.

# guest
Remember that make runs in the directory where the Makefile lives. Change into the correct sub-directory first. Then run the targets.

# host
If you prefer a global command, use the d.rymcg.tech CLI or the d alias. It re-wraps those Make targets and works from any directory. For example, d make whoami config. Or d make whoami install.

# guest
These commands operate on your current Docker context. Switch with d context. You can also create shell aliases like prod make whoami install to pin a specific context without changing the global one.

# host
Everything in the repository uses open-source licenses. You can host your own projects in external repositories under any license and still use the same command line tooling.

# guest
At the edge, Traefik is the front door proxy for HTTP, TCP, and UDP. It terminates TLS and can enforce sentry authentication and authorization like mTLS, OAuth, HTTP Basic, or IP source range checks. Applications declare routes and middleware via container labels, so policy lives next to the service.

# host
For full-stack self-hosters you can run your own PKI with Step-CA and acme-dns. You can mint wildcard TLS certificates automatically. You can be your own Letâ€™s Encrypt alternative.

# guest
That is the story. Deploy anywhere. Manage from your workstation. Configure with .env files per context and instance. Use Make and the global CLI for ergonomics. Put Traefik at the edge. Add a self-hosted CA and DNS delegation if you want complete control.
