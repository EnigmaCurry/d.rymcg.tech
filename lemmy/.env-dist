# The domain name for the whoami service:
LEMMY_TRAEFIK_HOST=lemmy.example.com
# The tag for the Lemmy (backend) Docker image - https://hub.docker.com/r/dessalines/lemmy/tags
LEMMY_VERSION=0.19.11
# The tag for the Lemmy (UI) Docker image - https://hub.docker.com/r/dessalines/lemmy-ui/tags
LEMMY_UI_VERSION=0.19.11
# The tag for the Asonix/Pictrs Docker image - https://hub.docker.com/r/asonix/pictrs/tags
LEMMY_ASONIX_PICTRS_VERSION=0.5.16
# The tag for the Postgres Docker image - https://hub.docker.com/_/postgres
LEMMY_POSTGRES_IMAGE=16-alpine

# The name of this instance. If there is only one instance, use 'default'.
LEMMY_INSTANCE=

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
LEMMY_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
### NOTE: For Lemmy, turning on auth will make your server
### non-federated and fully private.
LEMMY_HTTP_AUTH=

# You can run the whoami service as any user/group:
LEMMY_UID=54321
LEMMY_GID=54321

# The password for the postgres database. This will be filled in automatically
# when you run `make config` or `make install`.
LEMMY_POSTGRES_PW=

# If true, will display the contents of config.hjson in the log when copied
# to the config volume
LEMMY_PRINT_CONFIG=true

# If true, add Traefik middleware to block the paths starting with /feeds,
# this way it will prevent the private data from the communities from
# leaking through the RSS feeds, which happens due to
# a bug: https://github.com/LemmyNet/lemmy/issues/3785
LEMMY_PRIVATE=false

# OAUTH2
### NOTE: For Lemmy, turning on Oauth will make your server
### non-federated and fully private.
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Forgejo server can log into your app and
# have full access.
LEMMY_OAUTH2=false
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`.
LEMMY_OAUTH2_AUTHORIZED_GROUP=


# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
LEMMY_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
LEMMY_MTLS_AUTHORIZED_CERTS=*.clients.lemmy.example.com

# Pictrs
# Configure LEMMY_PICTRS_ENABLED, LEMMY_PICTRS_INTERVAL, and
# LEMMY_PICTRS_MAX_AGE to instruct pictrs to automatically prune its
# content.
LEMMY_PICTRS_ENABLED=true
LEMMY_PICTRS_INTERVAL=1d
LEMMY_PICTRS_MAX_AGE=30d


# META:
# PREFIX=LEMMY
