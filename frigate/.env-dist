# The docker image to use (https://github.com/blakeblackshear/frigate/tags):
# Note: Frigate tags include a "v" (e.g., "v0.15.0") but their images actually
# don't, so do not include the "v", e.g., `FRIGATE_IMAGE=ghcr.io/blakeblackshear/frigate:0.15.0`
# Also, see here for image tags for different hardware:
# https://docs.frigate.video/frigate/installation#docker
FRIGATE_IMAGE=ghcr.io/blakeblackshear/frigate:0.15.0

# The domain name for the frigate service:
FRIGATE_TRAEFIK_HOST=frigate.example.com

# The name of this instance. If there is only one instance, use 'default'.
FRIGATE_INSTANCE=

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
FRIGATE_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
FRIGATE_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Gitea server can log into your app and
# have full access.
FRIGATE_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`.
FRIGATE_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by
# Step-CA:
FRIGATE_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
FRIGATE_MTLS_AUTHORIZED_CERTS=*.clients.frigate.example.com

FRIGATE_RTSP_PASSWORD=

# See here for an explanation and formula for calculating appropriate shared
# memory size:
# https://docs.frigate.video/frigate/installation/#calculating-required-shm-size
FRIGATE_SHM_SIZE=128mb

# For hardware acceleration, enter the path to the host hardware's
# device (`/dev/XXX`). Leave blank to not use hardware acceleration
# (also leave blank to use an AMD GPU, as its devices are mapped for
# you).
#
# E.g., Pass the USB Coral (needs to be modified for other versions)
# FRIGATE_VIDEO_HARDWARE_DEVICE=/dev/bus/usb # E.g., Pass a PCIe Coral
# (follow driver instructions here:
# https://coral.ai/docs/m2/get-started/#2a-on-linux)
# FRIGATE_VIDEO_HARDWARE_DEVICE=/dev/apex_0 # E.g., For Raspberry Pi 4B
# FRIGATE_VIDEO_HARDWARE_DEVICE=/dev/video11 # E.g., For Intel hwaccel
# (needs to be updated for your hardware)
# FRIGATE_VIDEO_HARDWARE_DEVICE=/dev/dri/renderD129
FRIGATE_VIDEO_HARDWARE_DEVICE=

# Enter the GPU type, or enter "None" for no GPU. Frigate supports
# many different GPUs, each requiring custom configuration in
# `docker-compose.yaml`, Frigate's `config.conf`, or both. See here
# for details:
# https://docs.frigate.video/configuration/hardware_acceleration/
#
# Currently, the d.rymcg.tech installation process only supports
# Nvidia or AMD GPUs (or no GPU). If your GPU only requires custom
# configuration in Frigate's `config.conf`, you can enter "None" here
# and then customize `config.conf` from within Frigate's UI after it
# is installed. Or feel free to submit a feature request for us to add
# support for your GPU:
# https://github.com/EnigmaCurry/d.rymcg.tech/issues
#
# Possible values: "Nvidia", "AMD", or "None".
FRIGATE_GPU=None
