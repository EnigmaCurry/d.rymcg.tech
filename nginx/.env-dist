# The domain name for the nginx service:
NGINX_TRAEFIK_HOST=www.example.com

NGINX_OWNER_UID=54321
NGINX_OWNER_GID=54321

## Add all the optional profiles you want:
## eg. To enable PHP, add the profile 'php-fpm' to this comma separated list:
## eg. DOCKER_COMPOSE_PROFILES=nginx,php-fpm
DOCKER_COMPOSE_PROFILES=nginx

## Set the NGINX config template:
## eg. To only serve static assets (HTML, CSS, images, etc.) use:
##    use: NGINX_TEMPLATE=default.template.conf
## eg. To also run PHP scripts
##    use: NGINX_TEMPLATE=php-fpm.template.conf
NGINX_TEMPLATE=default.template.conf

# Pick nginx version tag https://hub.docker.com/_/nginx
NGINX_VERSION=1.25-alpine
# Pick php version tag https://hub.docker.com/_/php
# Adminer likes 8.2. It had lots of warnings all over the page on 8.3.
NGINX_PHP_VERSION=8.2-fpm
# Pick redis version tag https://hub.docker.com/_/redis
NGINX_REDIS_VERSION=7-alpine
# Pick postgres version tag https://hub.docker.com/_/postgres
NGINX_POSTGRES_VERSION=16

# By default, PHP errors should not be shown to the end user:
# Turn this to true only in development mode:
NGINX_DEBUG_MODE=false

## Choose a default index file to install in the base image:
## default.php - this file prints "Hello, World!"
## phpinfo.php - this file prints the phpinfo() page
## github.com/.../adminer.php - this file installs Adminer release from github.
#NGINX_PHP_INDEX_FILE=phpinfo.php
#NGINX_PHP_INDEX_FILE=https://github.com/adminerevo/adminerevo/releases/download/v4.8.3/adminer-4.8.3.php
NGINX_PHP_INDEX_FILE=default.php

# Set a secure password via `make config`:
NGINX_POSTGRES_PASSWORD=
# configure the default database to create:
NGINX_POSTGRES_DB=postgres

# The name of this instance. If there is only one instance, use 'default'.
NGINX_INSTANCE=

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
NGINX_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
NGINX_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Gitea server can log into your app and
# have full access.
NGINX_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
NGINX_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
NGINX_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
NGINX_MTLS_AUTHORIZED_CERTS=*.clients.www.example.com

# META:
# PREFIX=NGINX
