#!/bin/bash

### Create a new external project directory based upon a template

## BIN is the _scripts directory inside of d.rymcg.tech
BIN=$(dirname $(realpath ${BASH_SOURCE}))
## ROOT_DIR is the root path of the d.rymcg.tech project
ROOT_DIR=$(dirname ${BIN})

source ${BIN}/funcs.sh
set -eo pipefail

echo "ROOT_DIR=${ROOT_DIR}"

if [[ $# != 3 ]]; then
    fault "Usage: create PROJECT_NAME TEMPLATE_NAME OUTPUT_DIR"
fi

PROJECT_NAME="$1"
TEMPLATE_NAME="$2"
OUTPUT_DIR="$3"

name_pattern='^[a-zA-Z][a-zA-Z0-9_-]*$'

if ! [[ "${PROJECT_NAME}" =~ $name_pattern ]]; then
    fault "PROJECT_NAME contains invalid characters"
fi
if ! [[ "$(basename "${OUTPUT_DIR}")" =~ $name_pattern ]]; then
    fault "OUTPUT_DIR contains invalid characters"
fi

if [[ -e "${OUTPUT_DIR}" ]]; then
    if [[ -d "${OUTPUT_DIR}" ]]; then
        fault "The directory already exists: ${OUTPUT_DIR}"
    fi
    fault "There is an existing file with the same name: ${OUTPUT_DIR}"
fi

## Ensure we are creating a new blank directory:
mkdir -p "$(dirname "${OUTPUT_DIR}")"
mkdir "${OUTPUT_DIR}"

TEMPLATE_DIR="${ROOT_DIR}/_templates/${TEMPLATE_NAME}"
TEMPLATE_FILES=("docker-compose.yaml" "docker-compose.instance.yaml" "Makefile" "README.md" ".env-dist")
COPY_FILES=(".gitignore")

if [[ ! -d "${TEMPLATE_DIR}" ]]; then
    fault "The template directory is missing: ${TEMPLATE_DIR}"
fi
for template in ${TEMPLATE_FILES[@]}; do
    if [[ ! -f "${TEMPLATE_DIR}/${template}" ]]; then
        fault "The template is missing ${template} : ${TEMPLATE_DIR}"
    fi
done

# These are all the explicit vars that envsubst will replace (ignores others):
#NB: envsubst requires literal variable references in single quotes:
TEMPLATE_VARS='${CREATE_TEMPLATE_TEMPLATE_NAME},${CREATE_TEMPLATE_PROJECT_NAME},${CREATE_TEMPLATE_PROJECT_URL_NAME},${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE},${CREATE_TEMPLATE_ROOT_DIR},${CREATE_TEMPLATE_TIMESTAMP},${CREATE_TEMPLATE_D_RYMCG_TECH_VERSION}'

export CREATE_TEMPLATE_TEMPLATE_NAME="${TEMPLATE_NAME}"
export CREATE_TEMPLATE_ROOT_DIR="${ROOT_DIR}"
export CREATE_TEMPLATE_PROJECT_NAME="$(echo ${PROJECT_NAME} | tr ' ' '-')"
export CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE="$(echo ${CREATE_TEMPLATE_PROJECT_NAME} | tr '[:lower:]' '[:upper:]' | tr '-' '_')"
export CREATE_TEMPLATE_PROJECT_URL_NAME="$(echo ${CREATE_TEMPLATE_PROJECT_NAME} | tr '[:upper:]' '[:lower:]' | tr '_' '-')"
export CREATE_TEMPLATE_TIMESTAMP="$(date)"
export CREATE_TEMPLATE_D_RYMCG_TECH_VERSION="$(git -C ${ROOT_DIR} rev-parse HEAD)"

echo "CREATE_TEMPLATE_PROJECT_NAME=${CREATE_TEMPLATE_PROJECT_NAME}"
echo "CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE=${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}"

## TODO: use ytt to template YAML instead of envsubst
## HOWEVER, this is blocked on https://github.com/carvel-dev/ytt/issues/63

for filename in ${TEMPLATE_FILES[@]}; do
    echo "# Rendering from template: ${OUTPUT_DIR}/${filename}"
    case "$filename" in
        README.md)
            ## Remove "Note:..." from the first line of the README template:
            (set +e; head -1 "${TEMPLATE_DIR}/${filename}" | grep -v "^Note:" ; tail -n +2 "${TEMPLATE_DIR}/${filename}") | envsubst "${TEMPLATE_VARS}" > "${OUTPUT_DIR}/${filename}";;
        *)
            cat "${TEMPLATE_DIR}/${filename}" | envsubst "${TEMPLATE_VARS}" > "${OUTPUT_DIR}/${filename}";;
    esac
done

for filename in ${COPY_FILES[@]}; do
    #echo "# Copying ${OUTPUT_DIR}/${filename}"
    cp -v "${TEMPLATE_DIR}/${filename}" "${OUTPUT_DIR}/"
done
echo "# Copying template directories ..."
find ${TEMPLATE_DIR} -maxdepth 1 -type d -printf "%P\n" | xargs -iXX cp -av "${TEMPLATE_DIR}/XX" "${OUTPUT_DIR}/XX"

echo ""
echo "# Finished creating new project directory: ${OUTPUT_DIR}"
