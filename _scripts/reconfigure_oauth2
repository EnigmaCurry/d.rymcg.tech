#!/bin/bash

## reconfigure_oauth2 VAR [default=yes|no] VAR2

## If no default given, unconditionally set the Oauth2 environment variable VAR via wizard.
## If the default is given, the user will be asked if they want Oauth2 or not, defaulting to the yes or no supplied.

BIN=$(dirname ${BASH_SOURCE})
source ${BIN}/funcs.sh
set -e

ENV_FILE=${1}
shift

## env var for oauth2
VAR=${1}
shift

## env var for authorized emails
VAR2=${2}   

enable_oauth2() {
    ${BIN}/reconfigure ${ENV_FILE} ${VAR}=yes
}

disable_oauth2() {
    ${BIN}/reconfigure ${ENV_FILE} ${VAR}=no
    exit 0
}


## Make new .env if it doesn't exist:
test -f ${ENV_FILE} || cp .env-dist ${ENV_FILE}

CONTEXT_INSTANCE=$(basename $ENV_FILE | sed 's/.env_//')

if [[ ${1} =~ ^default= ]]; then
    DEFAULT_ENABLED_OAUTH2=no
    if [[ ${1} =~ ^default=yes$ ]] || [[ $(${BIN}/dotenv -f ${ENV_FILE} get ${VAR}) == "yes" ]]; then
        DEFAULT_ENABLED_OAUTH2=yes
    fi
    echo ""
    echo "Using OpenID/OAuth2 will require a login to access your app and you can configure basic authorization by entering email addresses that are allowed to log into your app. Email addresses must match those of accounts on your Gitea instance. For example, if you have accounts on your Gitea instance for alice@example.com and bob@demo.com, and you only want Alice to be able to access this app, only enter `alice@example.com`."
    echo ""
    echo "SECURITY NOTE: Using OpenID/OAuth2 is on top of any authentication/authorization service your app provides. OpenID/Oauth2 will require a login to access your app and permit only specific logins, but it will not affect what a successfully logged-in person can do in your app. If your app has a built-in authorization mechanism that can check for the user header that traefik-forward-auth sends, then your app can limit what the logged-in person can do in the app. But if your app can't check the user header, or if your app doesn't have built-in authorization at all, then any person with an account on your Gitea server that you permit to log into your app will have full access."
    ${BIN}/confirm ${DEFAULT_ENABLED_OAUTH2} "Do you want to enable OpenID/OAuth2" "?" || disable_oauth2
fi
## Update var in .env* file
enable_oauth2


## Authorized email addresses

echo ""
## Check if authorized email addresses have already been configured
append_emails=""
authorized=$(${BIN}/dotenv -f ${ENV_FILE} get ${VAR2})
if [[ -n ${authorized} ]]; then
    echo "These email addresses are already authorized: ${authorized}"
    ${BIN}/confirm no "Do you want to delete them and authorize new email addresses" "?" && authorized="" || delete_emails=false
fi
if [[ ${delete_emails} == false ]]; then
    ${BIN}/confirm no "Do you want to authorize additional email addresses" "?" && append_emails="additional " && authorized+="," || exit 0  
fi

## Ask for new/additional authorized email addresses
identities=()
echo "Enter ${append_emails}email addresses that are authorized to access the app, one per line:"
while :
do
    ask "Enter an email address (enter blank to skip)" identity
    if [[ $identity == "" ]]; then
        break
    fi
    identities+=(${identity})
done
authorized+=$( IFS=$','; echo "${identities[*]}" )

## Update var2 in .env* file
${BIN}/reconfigure ${ENV_FILE} ${VAR2}=${authorized}