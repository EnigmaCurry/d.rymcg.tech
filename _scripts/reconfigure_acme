#!/bin/bash

## reconfigure_acme ENV_FILE

BIN=$(dirname ${BASH_SOURCE})
source ${BIN}/funcs.sh
set -e

ENV_FILE=${1}
shift
## Make new .env if it doesn't exist:
test -f ${ENV_FILE} || cp .env-dist ${ENV_FILE}

echo ""
echo "If you give Let's Encrypt your email address, they will send you alerts when your certificates are about to expire or about other misconfiguration."
${BIN}/reconfigure_ask ${ENV_FILE} TRAEFIK_ACME_CA_EMAIL "Enter your email address (not required; blank to skip)"

echo ""
echo "You can choose to use the Let's Encrypt production or staging API. Only production produces certificates that are valid in most browsers. Use staging for development and testing only."
${BIN}/confirm $([[ $(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_CERT_RESOLVER) == "production" ]] && echo yes || echo no) "Do you want to use the production Let's Encrypt API" "?" && ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CERT_RESOLVER=production ||  ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CERT_RESOLVER=staging

echo ""
echo "You can generate TLS certificates with ACME challenge over TLS or DNS."
echo "Here are the pros and cons:"
echo "* TLS challenge is easier, but won't work with firewalled LAN servers."
echo "* DNS challenge is recommended, but requires you to store a"
echo "  security sensitive API token from your DNS provider."
echo "* DNS challenge works through DNS, so no public port needs to be opened."
echo "  This will allow you to generate real valid certs for your private LAN services."
echo "* TLS challenge does not support wildcard domains. Non-wildcard domain "
echo "  names will be leaked to the public via Certificate Transparency (CT) logs,"
echo "  see https://letsencrypt.org/docs/ct-logs/"
echo "* DNS challenge allows wildcard domains, which prevents the full"
echo "  domain names from being leaked to CT logs."
echo "  (Only the root domain will still be leaked in either case.)"
echo "* If you choose DNS challenge, exercise caution and consider the "
echo "  principle of Least Privilege."
echo ""

if ${BIN}/confirm $(test "$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_CHALLENGE)" == "dns" && echo yes || echo no) \
         "Do you want to use the ACME DNS challenge type" ?;
then
    ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CHALLENGE=dns
    echo ""
    echo "Find the provider code of your supported DNS provider here:"
    echo "https://go-acme.github.io/lego/dns/#dns-providers"
    echo ""
    ${BIN}/reconfigure_ask ${ENV_FILE} TRAEFIK_ACME_DNS_PROVIDER "Enter the LEGO code for your DNS Provider" digitalocean
    echo ""
    echo "Find the necessary variable names for your provider:"
    echo "For example for DigitalOcean, see:"
    echo "  https://go-acme.github.io/lego/dns/digitalocean/"
    echo "  (eg. digitalocean requires the DO_AUTH_TOKEN variable)"
    echo "You need to enter the NAMES of these variables that your provider needs."
    echo "You can enter up to 5 variable names and/or leave them blank"

    ${BIN}/reconfigure_ask ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_1 "Enter the 1st DNS provider variable name" DO_AUTH_TOKEN
    TRAEFIK_ACME_DNS_VARNAME_1=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_DNS_VARNAME_1)

    test -n "${TRAEFIK_ACME_DNS_VARNAME_1}" && \
        ALLOW_BLANK=1 ${BIN}/reconfigure_ask ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_2 "Enter the 2nd DNS provider variable name (or leave blank)"  || ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_2=""
    TRAEFIK_ACME_DNS_VARNAME_2=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_DNS_VARNAME_2)

    test -n "${TRAEFIK_ACME_DNS_VARNAME_2}" && \
        ALLOW_BLANK=1 ${BIN}/reconfigure_ask ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_3 "Enter the 3rd DNS provider variable name (or leave blank)"  || ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_3=""
    TRAEFIK_ACME_DNS_VARNAME_3=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_DNS_VARNAME_3)
    
    test -n "${TRAEFIK_ACME_DNS_VARNAME_3}" && \
        ALLOW_BLANK=1 ${BIN}/reconfigure_ask ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_4 "Enter the 4th DNS provider variable name (or leave blank)"  || ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_4=""
    TRAEFIK_ACME_DNS_VARNAME_4=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_DNS_VARNAME_4)
    
    test -n "${TRAEFIK_ACME_DNS_VARNAME_4}" && \
        ALLOW_BLANK=1 ${BIN}/reconfigure_ask ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_5 "Enter the 5th DNS provider variable name (or leave blank)"  || ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_DNS_VARNAME_5=""
    TRAEFIK_ACME_DNS_VARNAME_5=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_DNS_VARNAME_5)

    echo ""
    echo "Now to enter the values for the custom DNS API variables:"
    test -n "${TRAEFIK_ACME_DNS_VARNAME_1}" && ${BIN}/reconfigure_ask ${ENV_FILE} ${TRAEFIK_ACME_DNS_VARNAME_1} "Enter the value for ${TRAEFIK_ACME_DNS_VARNAME_1}" || true
    test -n "${TRAEFIK_ACME_DNS_VARNAME_2}" && ${BIN}/reconfigure_ask ${ENV_FILE} ${TRAEFIK_ACME_DNS_VARNAME_2} "Enter the value for ${TRAEFIK_ACME_DNS_VARNAME_2}" || true
    test -n "${TRAEFIK_ACME_DNS_VARNAME_3}" && ${BIN}/reconfigure_ask ${ENV_FILE} ${TRAEFIK_ACME_DNS_VARNAME_3} "Enter the value for ${TRAEFIK_ACME_DNS_VARNAME_3}" || true
    test -n "${TRAEFIK_ACME_DNS_VARNAME_4}" && ${BIN}/reconfigure_ask ${ENV_FILE} ${TRAEFIK_ACME_DNS_VARNAME_4} "Enter the value for ${TRAEFIK_ACME_DNS_VARNAME_4}" || true
    test -n "${TRAEFIK_ACME_DNS_VARNAME_5}" && ${BIN}/reconfigure_ask ${ENV_FILE} ${TRAEFIK_ACME_DNS_VARNAME_5} "Enter the value for ${TRAEFIK_ACME_DNS_VARNAME_5}" || true
else
    ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CHALLENGE=tls
fi
