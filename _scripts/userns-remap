#!/bin/bash

set -e

## userns-remap {check,true,false}
## Configure the Docker server userns-remap setting
## See https://docs.docker.com/engine/security/userns-remap/

BIN=$(dirname ${BASH_SOURCE})
cmd=$1
if [[ $# -lt 1 ]]; then
        echo "Missing command argument:"
        echo "make userns-remap on           - Configure the Docker server for User Namespace Remap"
        echo "make userns-remap off          - Configure the Docker server for Root Namespace"
        echo "make userns-remap check        - Check the current Docker User Namespace Remap setting"
        exit 0
fi
DOCKER_HOST=$(docker context inspect | jq -r ".[0].Endpoints.docker.Host" | sed 's|ssh://||g');
if [[ $DOCKER_HOST =~ :[0-9]+$ ]]; then
    SSH_HOST=$(echo "$DOCKER_HOST" | sed 's/:.*//')
    SSH_PORT=$(echo "$DOCKER_HOST" | sed 's/.*://')
else
    SSH_HOST=$DOCKER_HOST
    SSH_PORT=22
fi


SSH_UID=$(ssh -p ${SSH_PORT} ${SSH_HOST} id -u)
[[ $SSH_UID != "0" ]] && SUDO_PREFIX="sudo" || SUDO_PREFIX=""
export DAEMON_CONF=${DAEMON_CONF:-/etc/docker/daemon.json}

echo "## Checking Docker Daemon config (${DAEMON_CONF}) ..."
if ! ssh -p ${SSH_PORT} ${SSH_HOST} "stat ${DAEMON_CONF} >/dev/null"; then
    ssh -p ${SSH_PORT} ${SSH_HOST} "${SUDO_PREFIX} echo {} > ${DAEMON_CONF} && echo Created new ${DAEMON_CONF}"
fi
if [[ $cmd == "check" ]]; then
    # Just check for the setting, don't configure anything:
    ssh -p ${SSH_PORT} ${SSH_HOST} "${SUDO_PREFIX} grep userns-remap ${DAEMON_CONF}" && echo "## userns-remap is configured" || echo "## userns-remap setting not found"
else
    if ssh -p ${SSH_PORT} ${SSH_HOST} "${SUDO_PREFIX} grep userns-remap ${DAEMON_CONF}"; then
        echo "## ${DAEMON_CONF} already has userns-remap setting."
    else
        echo "## userns-remap setting not found"
    fi
    if [[ $cmd == "on" ]]; then
        TMP_CONFIG=$(mktemp) && \
            ssh -p ${SSH_PORT} ${SSH_HOST} cat ${DAEMON_CONF} \
                | jq '.["userns-remap"]="default"' \
                     > ${TMP_CONFIG} \
            && cat ${TMP_CONFIG} \
            && scp -P ${SSH_PORT} ${TMP_CONFIG} ${SSH_HOST}:${TMP_CONFIG} \
            && ssh -p ${SSH_PORT} ${SSH_HOST} "${SUDO_PREFIX} sh -c \"mv ${TMP_CONFIG} ${DAEMON_CONF} && chmod 0644 ${DAEMON_CONF} && echo '## Restarting Docker ...' && systemctl restart docker && echo '## Docker restarted' && id dockremap && echo '# /etc/subuid' && cat /etc/subuid && echo '## Success'\"" \
                || echo '## Fail'
        ${0} check
    elif [[ $cmd == "off" ]]; then
        TMP_CONFIG=$(mktemp) && \
            ssh -p ${SSH_PORT} ${SSH_HOST} cat ${DAEMON_CONF} \
                | jq 'del(.["userns-remap"])' \
                     > ${TMP_CONFIG} \
            && cat ${TMP_CONFIG} \
            && scp -P ${SSH_PORT} ${TMP_CONFIG} ${SSH_HOST}:${TMP_CONFIG} \
            && ssh -p ${SSH_PORT} ${SSH_HOST} "${SUDO_PREFIX} sh -c \"mv ${TMP_CONFIG} ${DAEMON_CONF} && chmod 0644 ${DAEMON_CONF} && echo '## Restarting Docker ...' && systemctl restart docker && echo '## Docker restarted' && id dockremap && echo '# /etc/subuid' && cat /etc/subuid && echo '## Success'\"" \
                || echo '## Fail'
        ${0} check
    else
        echo "bad argument: ${cmd}"
        exit 1
    fi
fi
