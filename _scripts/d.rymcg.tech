#!/bin/bash
## The eponymous CLI script for the project d.rymcg.tech

## This script should be symlinked to a directory on your PATH. You
## may add the `user` subdirectory to your path, which contains a
## symlink prepared for you. DO NOT add the whole _scripts directory
## to your PATH, but only the _scripts/user subdirectory! DO NOT move
## this script, only make symlinks to it!
##
## For example (choose one or the other):
##
##   # Option 1 - This assumes ~/bin is already in your PATH:
##   ln -s ~/git/vendor/enigmacurry/d.rymcg.tech/_scripts/d.rymcg.tech ~/bin
##
##   # Option 2 - You would add this to the botom of your ~/.bashrc or ~/.profile
##   export PATH=~/git/vendor/enigmacurry/d.rymcg.tech/_scripts/user:${PATH}

set -eo pipefail

## BIN is the _scripts directory inside of d.rymcg.tech
BIN=$(dirname $(realpath ${BASH_SOURCE}))

## INFO_WORDS are keys to information that the completion script can ask for at runtime:
INFO_WORDS="INFO_WORDS ROOT_DIR"

## ROOT_DIR is the root path of the d.rymcg.tech project
## Validate that this script is running from the canonical location
ROOT_DIR=$(dirname ${BIN})
(test -f ${BIN}/funcs.sh && test -f ${ROOT_DIR}/Makefile && test -d ${ROOT_DIR}/traefik) || \
    (echo "Error: Invalid or corrupted d.rymcg.tech ROOT_DIR: ${ROOT_DIR}" >/dev/stderr
     echo "This script will not function properly if it has been moved." >/dev/stderr
     exit 1)

source ${BIN}/funcs.sh

export D_RYMCG_TECH_SCRIPT=true

__help() {
    echo "Found ROOT_DIR=${ROOT_DIR}"
    echo ""
    echo "## Main d.rymcg.tech sub-commands - Optional arguments are printed in brackets [OPTIONAL_ARG]"
    (
        echo -e "cd [SUBDIR]\tEnter a sub-shell and go to the ROOT_DIR directory (or given subdirectory)"
        echo -e "create [PROJECT] [TEMPLATE]\tCreate a new external project from a template"
        echo -e "make [PROJECT] [ARGS ...]\tRun a \`make\` command for the given d.rymcg.tech project name"
        echo -e "context\tView or set the current Docker context"
        echo -e "new-context\tCreate a new Docker context"
        echo -e "ssh [COMMAND ...]\tRun command or shell on active docker context SSH host"
        echo -e "completion\tSetup TAB completion in your shell"
    ) | expand -t 30
    echo ""
    echo "## Documentation sub-commands:"
    (
        echo -e "help\tShow this help screen"
        echo -e "list\tList available d.rymcg.tech projects"
        echo -e "\t(not including external projects, unless you symlink them into ROOT_DIR)"
        echo -e "readme\tOpen the main d.rymcg.tech README.md in your browser"
        echo -e "readme [PROJECT]\tOpen the README.md for the given project name"
        while IFS=' ' read -ra DOC_WORDS; do
            for word in "${DOC_WORDS[@]}"; do
                FILE_EXTENSION="md"
                test "${word}" == "license" && FILE_EXTENSION="txt"
                echo -e "readme ${word}\tOpen root documentation file: $(echo ${word} | tr '[:lower:]' '[:upper:']).${FILE_EXTENSION}"
            done
        done <<< "$(__d.rymcg.tech_documentation_words --lowercase | sed 's/readme//')"
        #echo -e "info\tInternal read-only information for shell completion support"
    ) | expand -t 30
    echo ""
}

__create() {
    if [[ $# -gt 1 ]]; then
        TEMPLATE_REPO="$2"
    else
        AVAIL_TEMPLATES=("Python Flask - https://github.com/EnigmaCurry/flask-template")
        echo ""
        TEMPLATE_REPO=$(choose "Choose a template:" "${AVAIL_TEMPLATES[@]}" | sed 's/.*- //')
        echo ""
    fi
    name_pattern='^[a-zA-Z][a-zA-Z0-9_-]*$'
    if [[ $# -gt 0 ]]; then
        PROJECT_NAME="$1"
        if ! [[ "${PROJECT_NAME}" =~ $name_pattern ]]; then
            fault "Error: Invalid characters in PROJECT_NAME -- valid regex: ${name_pattern}"
        fi
    else
        echo "This script will create a new docker-compose project and integrate d.rymcg.tech Makefiles" | fold -sw 70 && echo
        while ! [[ "${PROJECT_NAME}" =~ $name_pattern ]]; do
            test -n "${PROJECT_NAME}" && echo "Error: Invalid characters in PROJECT_NAME -- valid regex: ${name_pattern}"
            ask_no_blank "Enter a name for the new docker-compose project" PROJECT_NAME
        done
        echo ""
    fi
    PROJECT_NAME=$(echo "$PROJECT_NAME" | tr ' ' '-')
    ${BIN}/create "${PROJECT_NAME}" "${TEMPLATE_REPO}" "./${PROJECT_NAME}"
}

__ssh() {
    SSH_HOST=$(docker context inspect --format '{{.Endpoints.docker.Host}}' | sed 's|ssh://||')
    check_var SSH_HOST
    (set -x; ssh ${SSH_HOST} $@)
}

__install() {
    if [[ $# -gt 0 ]]; then
        fault "install does not take any args"
    fi
    make --no-print-directory -C ${ROOT_DIR} install
}

__change-directory() {
    if [[ $# -gt 0 ]]; then
        __make $1 cd
    else
        __make -- cd
    fi
    echo "Exited sub-shell."
}

__make() {
    if [[ $# -gt 0 ]]; then
        PROJECT_NAME="$1"; shift
        pattern="^-+$"
        if [[ "${PROJECT_NAME}" =~ $pattern ]]; then
            PROJECT_DIR=${ROOT_DIR}
        else
            PROJECT_DIR=${ROOT_DIR}/${PROJECT_NAME}
        fi
        test -d "${PROJECT_DIR}" || fault "Project directory does not exist: ${PROJECT_DIR}"
        make --no-print-directory -C "${PROJECT_DIR}" "$@" D_RYMCG_TECH_CLI_ALIAS=${D_RYMCG_TECH_CLI_ALIAS}
    else
        __list_projects
        error "Missing project name argument. Choose one from the above."
        error "To invoke the root Makefile use '-' as the name"
    fi
    DIR_NAME="$1"; shift
}

__list_projects() {
    (
        if [[ "$1" == "--raw" ]]; then
            find -L "${ROOT_DIR}" -maxdepth 1 -type d -printf "%P\n" | grep -v "^_" | grep -v "^\." | sort -u | xargs -iXX /bin/bash -c "test -f ${ROOT_DIR}/XX/Makefile && echo XX"
        else
            echo "List of available d.rymcg.tech projects (not including external projects):"
            echo ""
            set +e
            get_all_projects | column
            echo ""
        fi
    )
}

__readme() {
    if [[ $# -gt 0 ]]; then
        NAME="${1}"; shift
        NAME_UPPERCASE="$(echo "${NAME}" | tr '[:lower:]' '[:upper:]')"
        IFS=" " read -ra DOCS_ARRAY <<< "$(__d.rymcg.tech_documentation_words --uppercase)"
        declare -A DOCS_INDEX
        for doc in "${DOCS_ARRAY[@]}"; do
            DOCS_INDEX["${doc}"]="${doc}"
        done
        if [[ "${NAME_UPPERCASE}" == "LICENSE" ]]; then
            exe xdg-open "https://github.com/EnigmaCurry/d.rymcg.tech/blob/master/LICENSE.txt"
        elif [[ -v DOCS_INDEX["${NAME_UPPERCASE}"] ]]; then
            exe xdg-open "https://github.com/EnigmaCurry/d.rymcg.tech/blob/master/${NAME_UPPERCASE}.md#readme"
        else
            echo ${DOCS_INDEX["${NAME_UPPERCASE}"]}
            __make "${NAME}" readme "$@"
        fi
    else
        __make -- readme
    fi
}

__info() {
    if [[ $# == 0 ]]; then
        echo "## info returns read-only information about your d.rymcg.tech installation."
        echo "## This is an undocumented internal command for the completion scripts private use."
        echo "## Its behaviour is subject to change without notice."
        echo ""
        echo "## Available info keys:"
        IFS=" " read -ra WORDS <<< "${INFO_WORDS}"
        for word in "${WORDS[@]}"; do
            echo "${word}"
        done
        echo ""
    elif [[ "$1" == "ROOT_DIR" ]]; then
        echo "${ROOT_DIR}"
    elif [[ "$1" == "INFO_WORDS" ]]; then
        echo "${INFO_WORDS}"
    fi
}

__context() {
    if [[ $# == 0 ]] || [[ "$1" == "list" ]]; then
        readarray -t CONTEXTS < <(docker context list -q | grep -v default)
        local CURRENT_CONTEXT=$(docker context show)
        local CHOSEN_CONTEXT=$(wizard choose "Select the Docker context to use" "${CONTEXTS[@]}" --default "${CURRENT_CONTEXT}")
        docker context use "${CHOSEN_CONTEXT}"
    else
        exe docker context "$@"
    fi
}

__new_context() {
        echo
        confirm yes "This command can help create a new SSH config and Docker context"
        echo
        CHOICE=$(wizard choose --numeric "You must specify the SSH config entry to use" "I already have an SSH host entry in ~/.ssh/config that I want to use" "I want to make a new SSH host entry in ~/.ssh/config")
        if [[ "${CHOICE}" == 0 ]]; then
            SSH_HOST=$(choose "Choose an existing SSH Host config" $(cat ~/.ssh/config | grep -Po "^Host \K.*"))
        elif [[ "${CHOICE}" == 1 ]]; then
            SSH_HOST=$(wizard ask "Enter the new SSH context name (short host name) :")
            if grep "^Host ${SSH_HOST}$" ~/.ssh/config  >/dev/null 2>&1; then
                error "There is already an SSH config named ${SSH_HOST}."
                fault "You must edit ~/.ssh/config by hand and remove the Host entry named ${SSH_HOST}."
            fi
            SSH_HOSTNAME=$(wizard ask "Enter the fully qualified SSH Host DNS name :")
            TMP_CONFIG=$(mktemp)
            check_var SSH_HOST SSH_HOSTNAME
            [[ "$SSH_HOST" == "default" ]] && \
                fault "SSH host must not be named default."
            cat <<EOF > ${TMP_CONFIG}
Host ${SSH_HOST}
     Hostname ${SSH_HOSTNAME}
     User root
     ControlMaster auto
     ControlPersist yes
     ControlPath /tmp/ssh-%u-%r@%h:%p
EOF
            echo "## Here is the new SSH config entry:"
            cat ${TMP_CONFIG}
            echo
            confirm "no" "Do you want to append this config to ~/.ssh/config" "?"
            cat ${TMP_CONFIG} >> ~/.ssh/config
            rm -f ${TMP_CONFIG}
        else
            fault invalid choice
        fi
        check_var SSH_HOST
        if docker context inspect ${SSH_HOST} >/dev/null 2>&1; then
            echo
            error "There is already a Docker context named ${SSH_HOST}"
            confirm no "Do you want to remove and recreate this context" "?"
            docker context rm -f ${SSH_HOST}
        fi
        docker context create "${SSH_HOST}" --description "Created by 'd.rymcg.tech context new'" --docker "host=ssh://${SSH_HOST}"
        echo
        echo "## Here are all your configured Docker contexts:"
        docker context ls
        echo ""
        confirm "no" "Do you want to switch to the new ${SSH_HOST} context now" "?"
        docker context use ${SSH_HOST}
}

__run_script() {
    CMD="${1}"; shift
    ${ROOT_DIR}/_scripts/${CMD} "$@"
}

__d.rymcg.tech_cli_alias() {
    local ALIAS="$1"
    alias $1="D_RYMCG_TECH_CLI_ALIAS=${ALIAS} d.rymcg.tech "
    complete -F __d.rymcg.tech_completions $1

}

__d.rymcg.tech_project_alias() {
    local ROOT_DIR=$(d.rymcg.tech info ROOT_DIR)
    __ALIAS="${1}"
    __PROJECT_DIR="${2}"
    test -z "${__PROJECT_DIR}" && __PROJECT_DIR="${ROOT_DIR}/${__ALIAS}"
    export __ALIAS __PROJECT_DIR
    alias $1="make --no-print-directory -C ${__PROJECT_DIR} D_RYMCG_TECH_PROJECT_ALIAS=${__ALIAS}"
    read -r -d '' FUNC <<'EOF'
function _${__ALIAS}_complete {
    local __PROJECT_DIR=${__PROJECT_DIR}
    MAKE_TARGETS="$(make -C "${__PROJECT_DIR}" -qp 2>/dev/null | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' | grep -v "^Makefile$" | sort -u)"
    if [[ ${COMP_CWORD} == 1 ]]; then
        COMPREPLY=($(compgen -W "${MAKE_TARGETS}" "${COMP_WORDS[1]}"))
    else
        COMPREPLY=()
    fi
}
EOF
    FUNC=$(echo "${FUNC}" | envsubst '${__ALIAS} ${__PROJECT_DIR}')
    eval "${FUNC}"
    complete -o filenames -F _${__ALIAS}_complete ${__ALIAS}
    unset __ALIAS __PROJECT_DIR
}

__d.rymcg.tech_completions() {
    ### BASH completion
    ## dev links:
    ### https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html#Programmable-Completion-Builtins
    ### https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial
    ### https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
    ## COMP_WORDS: an array of all the words typed
    ## COMP_CWORD: an index of the COMP_WORDS array pointing to the word the current cursor is at
    ## COMP_LINE: the current command line
    ## COMPREPLY is an array variable used to store the output completions
    ROOT_PROJECT_PLACEHOLDER="^-+$"
    INFO_WORDS=$(d.rymcg.tech info INFO_WORDS)
    ROOT_DIR=$(d.rymcg.tech info ROOT_DIR)

    if [[ ${COMP_CWORD} == 1 ]]; then
        ## Complete the main command:
        ## d.rymcg.tech <TAB> ...
        COMMANDS="help create cd make list readme info context new-context completion install ssh"
        COMPREPLY=($(compgen -W "${COMMANDS}" "${COMP_WORDS[1]}"))
    elif [[ ${COMP_CWORD} == 2 ]]; then
        ALL_PROJECTS=$(d.rymcg.tech list --raw)
        ## Dispatch completion for the sub-command's first argument:
        ## d.rymcg.tech make <TAB> ...
        case ${COMP_WORDS[1]} in
            create)
                COMPREPLY=("#" "Type the project name");;
            cd)
                COMPREPLY=($(compgen -W "${ALL_PROJECTS}" "${COMP_WORDS[2]}"));;
            readme)
                COMPREPLY=($(compgen -W "$(__d.rymcg.tech_documentation_words) ${ALL_PROJECTS}" "${COMP_WORDS[2]}"));;
            make)
                COMPREPLY=($(compgen -W "-- ${ALL_PROJECTS}" "${COMP_WORDS[2]}"));;
            context)
                COMPREPLY=($(compgen -W "$(docker context ls --format '{{.Name}}')" "${COMP_WORDS[2]}"));;
            info)
                COMPREPLY=($(compgen -W "${INFO_WORDS}" "${COMP_WORDS[2]}"));;
            script)
                COMPREPLY=($(compgen -W "$(find ${ROOT_DIR}/_scripts -executable -printf '%P\n' | grep -v d.rymcg.tech)" "${COMP_WORDS[2]}"));;
        esac
    elif [[ ${COMP_CWORD} == 3 ]]; then
        ## Dispatch completion for the sub-commands second argument:
        ## d.rymcg.tech make traefik <TAB> ...
        if [[ "${COMP_WORDS[1]}" == "make" ]]; then
            PROJECT=${COMP_WORDS[2]}
            PROJECT_DIR="${ROOT_DIR}/${PROJECT}"
            if [[ "${PROJECT}" =~ ${ROOT_PROJECT_PLACEHOLDER} ]]; then
                PROJECT_DIR="${ROOT_DIR}"
            fi
            ## Thanks Chris Down https://unix.stackexchange.com/a/230050
            MAKE_TARGETS="$(make -C "${PROJECT_DIR}" -qp 2>/dev/null | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' | sort -u)"
            COMPREPLY=($(compgen -W "${MAKE_TARGETS}" "${COMP_WORDS[3]}"))
        elif [[ "${COMP_WORDS[1]}" == "create" ]]; then
            COMPREPLY=($(compgen -W "$(find ${ROOT_DIR}/_templates -maxdepth 1 -type d -printf "%P\n" | grep -v "^_")" "${COMP_WORDS[3]}"))
        fi
    fi
}


__d.rymcg.tech_documentation_words() {
    ROOT_DIR=$(d.rymcg.tech info ROOT_DIR)
    ## Find list of available documentation files in the git repo:
    declare -A DOCS_INDEX
    while IFS= read -r line; do
        DOCS_INDEX["$line"]="$line"
    done <<< $(git -C "${ROOT_DIR}" ls-tree --name-only origin/master | \
                   grep -E "(\.txt$|\.md$)" | \
                   sed -e 's/\.txt$//' -e 's/\.md$//')
    if [[ "$1" == "--lowercase" ]]; then
        echo "$(echo ${DOCS_INDEX[@]} | tr '[:upper:]' '[:lower:]')"
    elif [[ "$1" == "--uppercase" ]]; then
        echo "$(echo ${DOCS_INDEX[@]} | tr '[:lower:]' '[:upper:]')"
    else
        echo "$(echo ${DOCS_INDEX[@]} | tr '[:lower:]' '[:upper:]') $(echo ${DOCS_INDEX[@]} | tr '[:upper:]' '[:lower:]')"
    fi
}

__completion() {
    # Print the completion script to be evaluated
    USER_SCRIPT_PATH=$(echo "${ROOT_DIR}/_scripts/user" | sed "s|${HOME}|\$\{HOME\}|")
    if [[ $# -lt 1 ]]; then
        echo "#### To enable BASH shell completion support for d.rymcg.tech,"
        echo "#### add the following lines into your ~/.bashrc ::"
        echo "export PATH=\${PATH}:${USER_SCRIPT_PATH}"
        echo 'eval "$(d.rymcg.tech completion bash)"'
        echo ""
        echo "#### Optional aliases you may wish to uncomment:"
        echo "#### If you want to quickly access a sub-project you can do that too:"
        echo "#### For example, instead of running this long command:"
        echo "####   make -C ~/git/vendor/enigmacurry/d.rymcg.tech/traefik config"
        echo "#### Now you can run just: traefik config"
        echo "#### You can do this for any sub-project name:"
        echo "# __d.rymcg.tech_project_alias traefik"
        echo ""
        echo "#### If you have external projects, you can create an alias for those too:"
        echo "#### Also add the full path to the external project:"
        echo "#### For example, external project 'foo' in the directory ~/git/foo"
        echo "# __d.rymcg.tech_project_alias foo ~/git/foo"
        echo ""
        echo "#### If you want a shorter alias than d.rymcg.tech (eg. 'dry') you can add it:"
        echo "# __d.rymcg.tech_cli_alias dry"
        echo ""
    else
        if [[ "${1}" == "bash" ]]; then
            declare -f __d.rymcg.tech_documentation_words
            declare -f __d.rymcg.tech_completions
            declare -f __d.rymcg.tech_project_alias
            declare -f __d.rymcg.tech_cli_alias
            echo "complete -F __d.rymcg.tech_completions d.rymcg.tech"
        else
            fault "Sorry, this script only support BASH shell completion"
        fi
    fi
}

main() {
    if [[ $# -gt 0 ]]; then
        COMMAND=$1; shift
        case ${COMMAND} in
            help)
                __help "$@";;
            create)
                __create "$@";;
            cd)
                __change-directory "$@";;
            make)
                __make "$@";;
            list)
                __list_projects "$@";;
            readme)
                __readme "$@";;
            completion)
                __completion "$@";;
            info)
                __info "$@";;
            install)
                __install "$@";;
            context)
                __context "$@";;
            new-context)
                __new_context "$@";;
            script)
                __run_script "$@";;
            ssh)
                __ssh "$@";;
            status)
                __make -- status | sed "s|\./|${ROOT_DIR}/|g";;
            *)
                fault "Invalid command"
        esac
    else
        __help
    fi
}

main "$@"
