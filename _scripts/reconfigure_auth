#!/bin/bash

## reconfigure_auth VAR_PREFIX
## Subsume all the authentication and authorization configurations in 1 script

BIN=$(dirname ${BASH_SOURCE})
source ${BIN}/funcs.sh
set -eo pipefail

ENV_FILE=$1
VAR_PREFIX=$2
REQUIRED=$3
export __D_RY_CONFIG_ENTRY=reconfigure_auth

prompt="Do you want to enable sentry authorization in front of this app (effectively making the entire site private)?"
options=()
## Set default based on current auth settings in ENV_FILE

DISABLE_HTTP=false
DISABLE_OAUTH=false
DISABLE_MTLS=false

set +e
http_auth=$(${BIN}/dotenv -f ${ENV_FILE} get ${VAR_PREFIX}_HTTP_AUTH)
if [[ "$?" != "0" ]]; then DISABLE_HTTP=true; http_auth="";  fi
oauth2_auth=$(${BIN}/dotenv -f ${ENV_FILE} get ${VAR_PREFIX}_OAUTH2)
if [[ "$?" != "0" ]]; then DISABLE_OAUTH=true; oauth2_auth=""; fi
mtls_auth=$(${BIN}/dotenv -f ${ENV_FILE} get ${VAR_PREFIX}_MTLS_AUTH)
if [[ "$?" != "0" ]]; then DISABLE_MTLS=true; mtls_auth=false; fi
set -e

unset_oauth2() {
    if [[ "${DISABLE_OAUTH}" == "false" ]]; then
        ${BIN}/reconfigure ${ENV_FILE} "${VAR_PREFIX}_OAUTH2"=
    fi
}
unset_http_auth() {
    if [[ "${DISABLE_HTTP}" == "false" ]]; then
        ${BIN}/reconfigure ${ENV_FILE} "${VAR_PREFIX}_HTTP_AUTH"=
        TMP_PASSWORD=$(mktemp)
        if [[ -f passwords.json ]]; then
            cat passwords.json | jq "del(.\"${CONTEXT_INSTANCE}\")" > ${TMP_PASSWORD} && mv ${TMP_PASSWORD} passwords.json
        fi
    fi
}
unset_mtls_auth() {
    if [[ "${DISABLE_MTLS}" == "false" ]]; then
        ${BIN}/reconfigure ${ENV_FILE} "${VAR_PREFIX}_MTLS_AUTH"=false
    fi
}


if [[ "${REQUIRED,,}" == "required" ]]; then
    prompt="Sentry authorization is required for this application, but you get to pick what kind of authentication to use."
    YES_ANSWER_PREFIX="Use"
else
    options+=("No")
    YES_ANSWER_PREFIX="Yes,"
fi
if [[ "${DISABLE_HTTP}" == "false" ]]; then
    options+=("${YES_ANSWER_PREFIX} sentry authorization with HTTP Basic authentication (username / password)")
fi
if [[ "${DISABLE_OAUTH}" == "false" ]]; then
    options+=("${YES_ANSWER_PREFIX} sentry authorization with Oauth2 authentication")
fi
if [[ "${DISABLE_MTLS}" == "false" ]]; then
    options+=("${YES_ANSWER_PREFIX} sentry authorization with Mutual TLS (mTLS) certificates")
fi

if [[ "${REQUIRED,,}" == "required" ]]; then
    # Index of default choice gets shifted down one when "No" option is removed:
    if [[ -n "${http_auth}" ]]; then
        default="${options[0]}"
    elif [[ "${oauth2_auth}" == "true" ]]; then
        default="${options[1]}"
    elif [[ "${mtls_auth}" == "true" ]]; then
        default="${options[2]}"
    else
        default="${options[0]}"
    fi
else
    if [[ -n "${http_auth}" ]]; then
        default="${options[1]}"
    elif [[ "${oauth2_auth}" == "true" ]]; then
        default="${options[2]}"
    elif [[ "${mtls_auth}" == "true" ]]; then
        default="${options[3]}"
    else
        default="${options[0]}"
    fi
fi

## Ask user which authentication configuration they want
echo
choice=$(eval "${BIN}/script-wizard choose ${prompt@Q} ${options[@]@Q} --default ${default@Q}")

## Configure authentication per user's choice
case "${choice}" in
    No)
        unset_oauth2
        unset_http_auth
        unset_mtls_auth
        ;;
    *HTTP*)
        ${BIN}/reconfigure_htpasswd ${ENV_FILE} ${VAR_PREFIX}_HTTP_AUTH default=no && unset_oauth2 && unset_mtls_auth
        ;;
    *Oauth2*)
        ${BIN}/reconfigure_oauth2 ${ENV_FILE} ${VAR_PREFIX} && unset_http_auth && unset_mtls_auth
        ;;
    *mTLS*)
        ${BIN}/reconfigure_mtls ${ENV_FILE} ${VAR_PREFIX} && unset_http_auth && unset_oauth2
        ;;
    *)
        echo "Unknown option."
        exit 1
esac
