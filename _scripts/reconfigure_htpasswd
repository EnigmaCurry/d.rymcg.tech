#!/bin/bash

## reconfigure_htpasswd_ask VAR [default=yes|no]

## If no default given, unconditionally set the HTTP Basic Authentication environment variable VAR via wizard.
## If the default is given, the user will be asked if they want password auth or not, defaulting to the yes or no supplied.

BIN=$(dirname ${BASH_SOURCE})
source ${BIN}/funcs.sh
set -e

ENV_FILE=${1}
shift

VAR=${1}
shift

enable_http_basic_authentication() {
    if [[ -n $(${BIN}/dotenv -f ${ENV_FILE} get ${VAR}) ]]; then
        ${BIN}/confirm no "There is already a user auth string configured. Do you want to generate new users and passwords" "?" || exit 0
    fi

    PASSWORD_JSON=""
    HASHED_PASSWORDS=()
    while true; do
        ask_no_blank "Enter the username for HTTP Basic Authentication" USERNAME
        ask "Enter the passphrase for ${USERNAME} (leave blank to generate a random passphrase)" PLAIN_PASSWORD
        if [[ -z ${PLAIN_PASSWORD} ]]; then
            PLAIN_PASSWORD=$(openssl rand -base64 30 | head -c 20)
            echo "Plain text password for ${USERNAME} (save this): ${PLAIN_PASSWORD}"
        fi
        HASHED_PASSWORD=$(htpasswd -nb "${USERNAME}" "${PLAIN_PASSWORD}")
        HASHED_PASSWORDS+=(${HASHED_PASSWORD})
        URL_ENCODED_PASSWORD=$(python3 -c "from urllib.parse import quote; print(quote('''${PLAIN_PASSWORD=}''', safe=''))")
        echo "Hashed password: ${HASHED_PASSWORD}"
        echo "Url encoded: https://${USERNAME}:${URL_ENCODED_PASSWORD}@example.com/..."
        PASSWORD_JSON="${PASSWORD_JSON}, {\"username\": \"${USERNAME}\", \"password\": \"${PLAIN_PASSWORD}\", \"hashed_password\": \"${HASHED_PASSWORD}\", \"url_encoded\": \"$URL_ENCODED_PASSWORD\"}"
        ${BIN}/confirm no "Would you like to create additional usernames (for the same access privilege)" "?" || break
    done

    COMBINED_PASSWORD=$(echo $(IFS=, ; echo "${HASHED_PASSWORDS[*]}") | sed 's/\$/\$\$/g')
    ${BIN}/dotenv -f ${ENV_FILE} set ${VAR}="${COMBINED_PASSWORD}"
    echo "Set ${VAR}=${COMBINED_PASSWORD}"

    echo ""
    if ${BIN}/confirm $([[ "${DEFAULT_SAVE_CLEARTEXT_PASSWORDS_JSON}" == "true" ]] && echo yes || echo no) "Would you like to export the usernames and cleartext passwords to the file passwords.json" "?"; then
        PASSWORD_JSON="[${PASSWORD_JSON:2}]"
        if [[ ! -f passwords.json ]]; then
            echo '{}' | jq > passwords.json
        fi
        TMP_PASSWORD=$(mktemp)
        (
            cat passwords.json && echo ${PASSWORD_JSON} | jq --argjson "${CONTEXT_INSTANCE}" "${PASSWORD_JSON}" '$ARGS.named'
        ) | jq -s add > ${TMP_PASSWORD} && mv ${TMP_PASSWORD} passwords.json
    fi
}

disable_http_basic_authentication() {
    ${BIN}/reconfigure ${ENV_FILE} ${VAR}=
    TMP_PASSWORD=$(mktemp)
    cat passwords.json | jq "del(.\"${CONTEXT_INSTANCE}\")" > ${TMP_PASSWORD} && mv ${TMP_PASSWORD} passwords.json
    exit 0
}


## Make new .env if it doesn't exist:
test -f ${ENV_FILE} || cp .env-dist ${ENV_FILE}

CONTEXT_INSTANCE=$(basename $ENV_FILE | sed 's/.env_//')
DEFAULT_SAVE_CLEARTEXT_PASSWORDS_JSON=${DEFAULT_SAVE_CLEARTEXT_PASSWORDS_JSON:-false}

if [[ ${1} =~ ^default= ]]; then
    DEFAULT_ENABLED_AUTH=no
    if [[ ${1} =~ ^default=yes$ ]] || [[ -n "$(${BIN}/dotenv -f ${ENV_FILE} get ${VAR})" ]]; then
        DEFAULT_ENABLED_AUTH=yes
    fi
    ${BIN}/confirm ${DEFAULT_ENABLED_AUTH} "Do you want to require HTTP Basic Authentication" "?" || disable_http_basic_authentication
fi
enable_http_basic_authentication

