#!/bin/bash

BIN=$(realpath $(dirname ${BASH_SOURCE}))
source ${BIN}/funcs.sh
check_var ENV_FILE ROOT_DIR
set -eo pipefail

get_entrypoint_value() {
    cd "${ROOT_DIR}"
    local entrypoint_name="$1"
    local suffix="$2"
    check_var entrypoint_name
    check_var suffix
    check_var ENV_FILE
    local traefik_env="${ROOT_DIR}/traefik/${ENV_FILE}"
    test -f "${traefik_env}" || fault "Could not find traefik env file: ${traefik_env}"
    ${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_${entrypoint_name^^}_ENTRYPOINT_${suffix^^}"
    if [[ $? != 0 ]]; then
        # Find custom entrypoint data:
        TRAEFIK_CUSTOM_ENTRYPOINTS=$(${BIN}/dotenv -f "${traefik_env}" get TRAEFIK_CUSTOM_ENTRYPOINTS)
        IFS=',' read -ra items <<< "${TRAEFIK_CUSTOM_ENTRYPOINTS}"
        for item in "${items[@]}"; do
            if [[ "$item" =~ ^$entrypoint_name: ]]; then
                IFS=':' read -ra parts <<< "$item"
                case "${suffix^^}" in
                    HOST)
                        echo ${parts[1]};;
                    PORT)
                        echo ${parts[2]};;
                    PROTOCOL)
                        echo ${parts[3]};;
                    PROXY_PROTOCOL_TRUSTED_IPS)
                        echo ${parts[4]};;
                    USE_HTTPS)
                        echo ${parts[5]};;
                esac
                return 0
            fi
        done
        return 1
    fi
}

check_missing_entrypoint_var() {
    if get_entrypoint_value $@ &>/dev/null; then
        return 1
    else
        return 0
    fi
}

# Function to get layer 4 routes if enabled
get_layer_4_routes() {
    cd ${ROOT_DIR}
    local traefik_env="${ROOT_DIR}/traefik/${ENV_FILE}"
    test -f ${traefik_env} || fault "Could not find traefik env file: ${traefik_env}"
    local layer_4_enabled=$(${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_4_TCP_UDP_PROXY_ENABLED")
    if [[ "$layer_4_enabled" == "true" ]]; then
        ${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_4_TCP_UDP_PROXY_ROUTES"
    else
        echo ""
    fi
}

# Function to get layer 7 routes if enabled
get_layer_7_routes() {
    cd ${ROOT_DIR}
    local traefik_env="${ROOT_DIR}/traefik/${ENV_FILE}"
    test -f ${traefik_env} || fault "Could not find traefik env file: ${traefik_env}"
    local layer_7_enabled=$(${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_7_TLS_PROXY_ENABLED")
    if [[ "$layer_7_enabled" == "true" ]]; then
        ${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_7_TLS_PROXY_ROUTES"
    else
        echo ""
    fi
}

inspect_container() {
    docker inspect "$1" | jq -r '
                .[] | .Name as $name | .Config.Labels as $labels
                | ($labels | to_entries[]
                    | select(.key | test("traefik\\.http\\.routers\\..*\\.rule") or test("traefik\\.tcp\\.routers\\..*\\.rule"))
                    | .key as $rule_key
                    | .value as $rule_value
                    | ($labels[$rule_key | sub("\\.rule$"; ".entrypoints")] // "unknown") as $entrypoints_value
                    | ($rule_value | capture("(Host|HostSNI)\\(`(?<host>[^`]*)`\\)(\\s*&&\\s*Path\\(`(?<path>[^`]*)`\\))?")) as $captured
                    | $name[1:] + " " + $entrypoints_value + " " +
                    (
                        (if $entrypoints_value == "web" then "http://"
                         elif $entrypoints_value == "web_plain" then "http://"
                         elif $rule_key | test("traefik\\.http\\.") then "https://"
                         else $entrypoints_value + "://" end) +
                        $captured.host +
                        (if $entrypoints_value == "web" then ""
                         elif $entrypoints_value == "websecure" then ""
                         elif $entrypoints_value == "web_plain" then ":PORT_PLACEHOLDER"
                         else ":PORT_PLACEHOLDER" end) +
                        ($captured.path // "/")
                    )
                )'
}

get_docker_container_routes() {
    docker ps -q | while read -r container_id; do
        inspect_container ${container_id} | while read -r container_name entrypoint url; do
            if [[ "$entrypoint" != "web" && "$entrypoint" != "websecure" ]]; then
                if check_missing_entrypoint_var "$entrypoint" port; then
                    echo "$container_name MISSING $url - -"
                    continue
                fi
                port=$(get_entrypoint_value $entrypoint port)
                url="${url//PORT_PLACEHOLDER/$port}"
            fi
            proxy_protocol="$(get_entrypoint_value $entrypoint proxy_protocol_trusted_ips)"
            if [[ -z "${proxy_protocol}" ]]; then
                proxy_protocol="-"
            fi
            
            destination="$container_name"
            echo "$container_name $entrypoint $url ${destination} ${proxy_protocol}"
        done
    done
}

list_routes() {    
# Print list of Traefik container routes
    {
        # Generate formatted output
        {
            echo "Service Entrypoint URL Destination Upstream_Proxy"
            echo "-------------- ---------- --- ---------- --------------"
            get_docker_container_routes
            
            # Print layer 4 routes if enabled
            layer_4_routes=$(get_layer_4_routes)
            if [[ -n "$layer_4_routes" ]]; then
                IFS=',' read -ra routes <<< "$layer_4_routes"
                declare -A seen_routes
                for route in "${routes[@]}"; do
                    IFS=':' read -r entrypoint ip_address port proxy_protocol <<< "$route"
                    if [[ -n "$proxy_protocol" ]] && [[ "$proxy_protocol" != "0" ]]; then
                        set +e
                        proxy_protocol="$(get_entrypoint_value ${entrypoint} proxy_protocol_trusted_ips)"
                        proxy_protocol="${proxy_protocol:--}"
                        set -e
                    else
                        proxy_protocol="-"
                    fi
                    tcp_or_udp=$(get_entrypoint_value ${entrypoint} protocol)
                    if [[ -z "${seen_routes[$route]}" ]]; then
                        echo "- ${entrypoint} ${tcp_or_udp}://${ip_address}:${port} ${ip_address}:${port} ${proxy_protocol}"
                        seen_routes[$route]=1
                    fi
                done
            fi

            # Print layer 7 routes if enabled
            layer_7_routes=$(get_layer_7_routes)
            if [[ -n "$layer_7_routes" ]]; then
                IFS=',' read -ra routes <<< "$layer_7_routes"
                declare -A seen_routes
                for route in "${routes[@]}"; do
                    IFS=':' read -r domain ip_address port proxy_protocol <<< "$route"
                    if [[ -z "${seen_routes[$route]}" ]]; then
                        if [[ -n "$proxy_protocol" ]] && [[ "$proxy_protocol" != "0" ]]; then
                            proxy_protocol="$(get_entrypoint_value websecure proxy_protocol_trusted_ips)"
                            proxy_protocol="${proxy_protocol:--}"
                        else
                            proxy_protocol="-"
                        fi
                        echo "- websecure https://${domain} ${ip_address}:${port} ${proxy_protocol}"
                        seen_routes[$route]=1
                    fi
                done
            fi
        } | column -t
    } | {
        # Split output to stderr and stdout
        read -r header
        read -r line
        echo "$header"
        echo "$line"
        cat
        echo
        echo "Note: these routes are defined in the configuration, but may not necessarily reflect Traefik's current state until you reinstall it."
    } | less -FSX


}

usage() {
    local alias="${D_RYMCG_TECH_CONTEXT_ALIAS:-${D_RYMCG_TECH_CLI_ALIAS:-d.rymcg.tech}}"
    echo "Manage Traefik routes"
    echo 
    echo "Usage: ${D_RYMCG_TECH_CONTEXT_ALIAS:-d.rymcg.tech} route {list|add|remove} ARGS [options]"
    echo 
    echo "Subcommands:"
    echo "  list      - List all routes"
    echo "  add       - Add a new route"
    echo "      add (DOMAIN|ENTRYPOINT) DEST_IP DEST_PORT [OPTIONS...]"
    echo "  remove    - Remove an existing route"
    echo "      remove (DOMAIN|ENTRYPOINT) [OPTIONS...]"
    echo
    echo "Options for add / remove:"
    echo "  --layer7                       - create a Layer 7 route (default)"
    echo "  --layer4                       - create a Layer 4 route"
    echo "  --restart [true/false]         - Automatically restart Traefik or not"
    echo "  --proxy-protocol [true/false]  - Turn on Proxy Protocol for the route or not"
    echo
    echo "Examples:"
    echo
    echo "Add Layer 7 route:"
    echo " ${alias} route add whoami.example.com 192.168.1.2 8000" 
    echo
    echo "Remove Layer 7 route:"
    echo " ${alias} route remove whoami.example.com"
    echo
    echo "Add Layer 4 route (entrypoint test must already exist):"
    echo " ${alias} route add test 192.168.1.2 8000 --layer4"
    echo 
    echo "Remove Layer 4 route:"
    echo " ${alias} route remove test" 
}

main() {
    if [[ $# -eq 0 ]]; then
        # If no args are passed, check for ARGS variable and use that if it exists:
        if [[ -n "${ARGS}" ]]; then
            read -a args <<< "${ARGS}"
        else
            usage
        fi
    else
        args=("$@")
    fi
    subcommand=$(pop_array args)
    if [[ -z "$subcommand" ]]; then
        usage
    else
        case "$subcommand" in
            list)
                list_routes $@
                ;;
            add)
                echo TODO
                ;;
            remove)
                echo TODO
                ;;
            *)
                echo "Error: Invalid subcommand '$subcommand'."
                usage
                exit 1
                ;;
        esac
        
    fi
}

main $@
