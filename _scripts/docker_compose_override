#!/bin/bash

# docker_compose_override ENV_FILE ENV_VAR1 ENV_VAR2 VAR_ALIAS1=ENV_VAR3 VAR4=:"some literal value"...
set -e
if [[ $# -lt 1 ]]; then
    echo "Missing args. docker_compose_override ENV_FILE ENV_VAR1 ENV_VAR2";
    exit 1;
fi
BIN=$(dirname ${BASH_SOURCE})
source ${BIN}/funcs.sh
ENV_FILE=$1; shift
YTT_DATA_ARGS=""

test -f docker-compose.instance.yaml || (echo "Missing docker-compose.instance.yaml. This project has not been setup with an override template yet." && exit 1)

DOCKER_CONTEXT=$(${BIN}/docker_context)
instance=${instance:-${INSTANCE}}
if [[ -n "${instance}" ]]; then
    CONTEXT_INSTANCE="${DOCKER_CONTEXT}_${instance}"
else
    CONTEXT_INSTANCE="${DOCKER_CONTEXT}"
fi
OVERRIDE="docker-compose.override_${CONTEXT_INSTANCE}.yaml"

for var in "$@"; do
    ytt_var="${var}"
    value=""
    if [[ "${var}" == *"=:"* ]]; then
        # Get literal value from command line
        parts=(${var//=:/ }); var=${parts[0]}; value=${parts[@]:1};
        ytt_var="${var}"
    else
        # Get value from env file
        if [[ "${var}" == *"="* ]]; then
            # Make it an alias to a var in the env file:
            parts=(${var//=/ }); var_alias=${parts[0]}; var=${parts[@]:1};
            ytt_var="${var_alias}"
        fi
        value="$(${BIN}/dotenv -f ${ENV_FILE} get $var)" || true
    fi
    test -z "${value}" && echo "${var} is blank." && continue
    ytt_var=$(echo "$ytt_var" | tr '[:upper:]' '[:lower:]')
    YTT_DATA_ARGS="${YTT_DATA_ARGS} --data-value ${ytt_var}=\"${value}\""
done

echo '#' ytt ${YTT_DATA_ARGS} \< docker-compose.instance.yaml \> ${OVERRIDE}
ytt ${YTT_DATA_ARGS} < docker-compose.instance.yaml > ${OVERRIDE}

echo "Created docker-compose override: ${OVERRIDE}"
