#!/bin/bash

BIN=$(realpath $(dirname ${BASH_SOURCE}))
source ${BIN}/funcs.sh
check_var ENV_FILE ROOT_DIR
set -eo pipefail

# Function to get the port number for a given entrypoint from the .env file
get_entrypoint_port() {
    cd ${ROOT_DIR}
    local entrypoint_name="$1"
    check_var entrypoint_name
    local traefik_env="${ROOT_DIR}/traefik/${ENV_FILE}"
    test -f ${traefik_env} || fault "Could not find traefik env file: ${traefik_env}"
    ${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_${entrypoint_name^^}_ENTRYPOINT_PORT"
}

# Function to get layer 4 routes if enabled
get_layer_4_routes() {
    cd ${ROOT_DIR}
    local traefik_env="${ROOT_DIR}/traefik/${ENV_FILE}"
    test -f ${traefik_env} || fault "Could not find traefik env file: ${traefik_env}"
    local layer_4_enabled=$(${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_4_TCP_UDP_PROXY_ENABLED")
    if [[ "$layer_4_enabled" == "true" ]]; then
        ${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_4_TCP_UDP_PROXY_ROUTES"
    else
        echo ""
    fi
}

# Function to get layer 7 routes if enabled
get_layer_7_routes() {
    cd ${ROOT_DIR}
    local traefik_env="${ROOT_DIR}/traefik/${ENV_FILE}"
    test -f ${traefik_env} || fault "Could not find traefik env file: ${traefik_env}"
    local layer_7_enabled=$(${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_7_TLS_PROXY_ENABLED")
    if [[ "$layer_7_enabled" == "true" ]]; then
        ${BIN}/dotenv -f "${traefik_env}" get "TRAEFIK_LAYER_7_TLS_PROXY_ROUTES"
    else
        echo ""
    fi
}

main() {
    
# Print list of Traefik container routes
    {
        # Generate formatted output
        {
            echo "Service Entrypoint URL Destination"
            echo "-------------- ---------- --- ----------"
            docker ps -q | while read -r container_id; do
                docker inspect "$container_id" | jq -r '
                .[] | .Name as $name | .Config.Labels as $labels
                | ($labels | to_entries[]
                    | select(.key | test("traefik\\.http\\.routers\\..*\\.rule") or test("traefik\\.tcp\\.routers\\..*\\.rule"))
                    | .key as $rule_key
                    | .value as $rule_value
                    | ($labels[$rule_key | sub("\\.rule$"; ".entrypoints")] // "unknown") as $entrypoints_value
                    | ($rule_value | capture("(Host|HostSNI)\\(`(?<host>[^`]*)`\\)(\\s*&&\\s*Path\\(`(?<path>[^`]*)`\\))?")) as $captured
                    | $name[1:] + " " + $entrypoints_value + " " +
                    (
                        (if $entrypoints_value == "web" then "http://"
                         elif $entrypoints_value == "web_plain" then "http://"
                         elif $rule_key | test("traefik\\.http\\.") then "https://"
                         else $entrypoints_value + "://" end) +
                        $captured.host +
                        (if $entrypoints_value == "web" then ""
                         elif $entrypoints_value == "websecure" then ""
                         elif $entrypoints_value == "web_plain" then ":PORT_PLACEHOLDER"
                         else ":PORT_PLACEHOLDER" end) +
                        ($captured.path // "/")
                    )
                )' | while read -r container_name entrypoint url; do
                    if [[ "$entrypoint" != "web" && "$entrypoint" != "websecure" ]]; then
                        port=$(get_entrypoint_port "$entrypoint")
                        url="${url//PORT_PLACEHOLDER/$port}"
                    fi
                    echo "$container_name $entrypoint $url -"
                done
            done

            # Print layer 4 routes if enabled
            layer_4_routes=$(get_layer_4_routes)
            if [[ -n "$layer_4_routes" ]]; then
                IFS=',' read -ra routes <<< "$layer_4_routes"
                declare -A seen_routes
                for route in "${routes[@]}"; do
                    IFS=':' read -r protocol ip_address port _ <<< "$route"
                    if [[ -z "${seen_routes[$route]}" ]]; then
                        echo "- layer-4 ${protocol}://${ip_address}:${port} ${ip_address}:${port}"
                        seen_routes[$route]=1
                    fi
                done
            fi

            # Print layer 7 routes if enabled
            layer_7_routes=$(get_layer_7_routes)
            if [[ -n "$layer_7_routes" ]]; then
                IFS=',' read -ra routes <<< "$layer_7_routes"
                declare -A seen_routes
                for route in "${routes[@]}"; do
                    IFS=':' read -r domain ip_address port _ <<< "$route"
                    if [[ -z "${seen_routes[$route]}" ]]; then
                        echo "- layer-7 https://${domain} ${ip_address}:${port}"
                        seen_routes[$route]=1
                    fi
                done
            fi
        } | column -t
    } | {
        # Split output to stderr and stdout
        read -r header
        read -r line
        >&2 echo "$header"
        >&2 echo "$line"
        cat
    } | less -FSX

echo
echo "Note: these are the traefik configured routes, but may not necessarily reflect Traefik's current state." | fold -w 70 | sed 's/^/## /'

}

main
