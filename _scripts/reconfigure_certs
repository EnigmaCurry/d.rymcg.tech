#!/bin/bash

## reconfigure_certs ENV_FILE

BIN=$(dirname ${BASH_SOURCE})
source ${BIN}/funcs.sh
set -e

PENDING_CHANGES=0

manage_certificates() {
    TRAEFIK_ACME_CERT_DOMAINS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_CERT_DOMAINS)
    if [[ $TRAEFIK_ACME_CERT_DOMAINS == "[]" || $TRAEFIK_ACME_CERT_DOMAINS == "" ]]; then
        echo "No certificate domains are configured."
        if [[ $TRAEFIK_ACME_CERT_DOMAINS == "" ]]; then
            ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CERT_DOMAINS="[]"
        fi
        echo ""
        return
    fi

    CERT_INDEX=0
    LINES=()
    while :
    do
        CN=$(echo $TRAEFIK_ACME_CERT_DOMAINS | jq -r ".[${CERT_INDEX}][0]")
        SANS=$(echo $TRAEFIK_ACME_CERT_DOMAINS | jq -rc ".[${CERT_INDEX}][1]")
        if [[ $CN == "null" ]]; then
            break
        fi
        if [[ $SANS != "null" && ${SANS} != "[]" ]]; then
            SANS=$(echo "${SANS}" | sed -e 's/\[//g' -e 's/\]//g' -e 's/"//g' -e 's/,/ /g')
            LINES+=("$((${CERT_INDEX} + 1))) ${CN} (${SANS})")
        else
            LINES+=("$((${CERT_INDEX} + 1))) ${CN}")
        fi
        CERT_INDEX=$((CERT_INDEX+1))
    done

    CERT_INDEX=$(wizard choose -c0 --numeric "Select a certificate to edit" "${LINES[@]}")
    if [[ -z "${CERT_INDEX}" ]]; then
        return
    else
        edit_certificate $CERT_INDEX
    fi
}

create_cert() {
    ## Create blank cert, then immediately edit it:
    TRAEFIK_ACME_CERT_DOMAINS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_CERT_DOMAINS)
    CERT_INDEX=$(echo "${TRAEFIK_ACME_CERT_DOMAINS}" | jq length)
    TRAEFIK_ACME_CERT_DOMAINS=$(echo "${TRAEFIK_ACME_CERT_DOMAINS}" | jq -c '. |= .+ [["",[]]]' )
    ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CERT_DOMAINS="${TRAEFIK_ACME_CERT_DOMAINS}"
    PENDING_CHANGES=1
    edit_certificate_cn_and_sans ${CERT_INDEX} CREATE
}

edit_certificate() {
    CERT_INDEX=$1
    check_num CERT_INDEX

    CN=$(echo $TRAEFIK_ACME_CERT_DOMAINS | jq -r ".[${CERT_INDEX}][0]")
    SANS=$(echo $TRAEFIK_ACME_CERT_DOMAINS | jq -rc ".[${CERT_INDEX}][1]")

    echo "Certificate Request #${CERT_INDEX} :"
    echo "  Subject (CN) (main domain name): ${CN}"
    echo "  Alternates (SANS) (secondary domain names): ${SANS}"
    echo
    CHOICE=$(wizard choose -c0 --numeric "Edit certificate" \
                    "Re-enter the certificate domain names (CN and SANS)" \
                    "Delete this certificate" \
                    "Done / Go back")
    case ${CHOICE} in
        0) edit_certificate_cn_and_sans ${CERT_INDEX};;
        1) delete_certificate ${CERT_INDEX};;
        *) manage_certificates;;
    esac
}

edit_certificate_cn_and_sans() {
    CERT_INDEX=$1
    CREATE=$2
    check_num CERT_INDEX
    TRAEFIK_ACME_CERT_DOMAINS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_CERT_DOMAINS)
    CN=$(echo $TRAEFIK_ACME_CERT_DOMAINS | jq -r ".[${CERT_INDEX}][0]")
    SANS=$(echo $TRAEFIK_ACME_CERT_DOMAINS | jq -rc ".[${CERT_INDEX}][1]")
    if [[ $CN == "null" ]]; then
        CN=""
    fi
    if [[ ${CN} == "" ]]; then
        DEFAULT_CN=$(get_root_domain)
    else
        DEFAULT_CN="${CN}"
    fi
    ask_no_blank 'Enter the main domain (CN) for this certificate (eg. `d.rymcg.tech` or `*.d.rymcg.tech`)' domain $DEFAULT_CN
    sans=()
    echo "Now enter additional domains (SANS), one per line:"
    while :
    do
        ask "Enter a secondary domain (enter blank to skip)" second
        if [[ $second == "" ]]; then
            break
        fi
        sans+=(${second})
    done
    echo ""
    echo "Main domain:"
    echo " ${domain}"
    echo "Secondary (SANS) domains:"
    for secondary in "${sans[@]}"; do
        echo " ${secondary}"
    done
    echo ""

    [[ -n "$CREATE" ]] || ${BIN}/confirm yes "Do you want to save these changes" "?" || return 0
    sans=$(for secondary in "${sans[@]}"; do
               echo "${secondary}"
           done | jq --raw-input --slurp 'split("\n") | map(select(. != ""))' | jq -c)
    domains=$(jq -cn "[\"${domain}\", ${sans}]")
    TRAEFIK_ACME_CERT_DOMAINS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_CERT_DOMAINS)

    TRAEFIK_ACME_CERT_DOMAINS=$(echo "${TRAEFIK_ACME_CERT_DOMAINS}" | jq -c --argjson index "$CERT_INDEX" ".[$CERT_INDEX] |= $domains" )
    ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CERT_DOMAINS="${TRAEFIK_ACME_CERT_DOMAINS}"
    PENDING_CHANGES=1
    if [[ -n "${CREATE}" ]]; then
        return
    else
        manage_certificates
    fi
}

delete_certificate() {
    CERT_INDEX=$1
    check_num CERT_INDEX
    ${BIN}/confirm yes "Do you want to delete this certificate" "?" || return 0
    TRAEFIK_ACME_CERT_DOMAINS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_ACME_CERT_DOMAINS)
    TRAEFIK_ACME_CERT_DOMAINS=$(echo "${TRAEFIK_ACME_CERT_DOMAINS}" | jq -c "del(.[$CERT_INDEX])")
    ${BIN}/reconfigure ${ENV_FILE} TRAEFIK_ACME_CERT_DOMAINS="${TRAEFIK_ACME_CERT_DOMAINS}"
    PENDING_CHANGES=1
    manage_certificates
}

main() {
    ## Make new .env if it doesn't exist:
    test -f ${ENV_FILE} || cp ../traefik/.env-dist ${ENV_FILE}
    
    while :
do
    CHOICE=$(wizard choose -c0 --numeric "Configure Traefik TLS certificates" \
                    "Manage all certificates." \
                    "Create a new certificate." \
                    "Done / Go back")
    case ${CHOICE} in
        0) manage_certificates;;
        1) create_cert;;
        2) break;;
        *) break;;
    esac
done
}

echo
ENV_FILE=${1}
shift
check_var ENV_FILE

$@
