DOCKER_BUILDKIT ?= 1

.PHONY: docker-compose
docker-compose: check-instance-project
	@QUIET="${QUIET}"; DOCKER_COMPOSE_FILE_ARGS="${DOCKER_COMPOSE_FILE_ARGS}"; export COMPOSE_PROFILES="$${DOCKER_COMPOSE_PROFILES:-$$(${BIN}/dotenv -f "${ENV_FILE}" get DOCKER_COMPOSE_PROFILES)}"; test -n "$$COMPOSE_PROFILES" && echo COMPOSE_PROFILES="$${COMPOSE_PROFILES}"; test "$${QUIET}" != "true" && set -x; docker compose $${DOCKER_COMPOSE_FILE_ARGS} --env-file=${ENV_FILE} ${EXTRA_ARGS}

.PHONY: docker-compose-lifecycle-cmd
docker-compose-lifecycle-cmd: check-instance-project
	@QUIET="${QUIET}"; DOCKER_COMPOSE_FILE_ARGS="${DOCKER_COMPOSE_FILE_ARGS}"; export COMPOSE_PROFILES="$${DOCKER_COMPOSE_PROFILES:-$$(${BIN}/dotenv -f "${ENV_FILE}" get DOCKER_COMPOSE_PROFILES)}"; COMMAND="docker compose $${DOCKER_COMPOSE_FILE_ARGS} --env-file=${ENV_FILE} --project-name="${PROJECT_NAME}" ${EXTRA_ARGS}"; test -n "$$COMPOSE_PROFILES" && echo COMPOSE_PROFILES="$${COMPOSE_PROFILES}" >/dev/stderr; test "$${QUIET}" != "true" && echo "ENV_FILE=${ENV_FILE}" >/dev/stderr && echo "# $${COMMAND}" >/dev/stderr; sh -c "exec $${COMMAND}"

.PHONY: docker-compose-build
docker-compose-build: check-instance-project
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="build ${EXTRA_ARGS} ${service}"

.PHONY: docker-compose-shell
docker-compose-shell:
#	@echo '## Starting shell ...'
#	@echo '## Available arguments for `make shell`:'
#	@echo '## USERNAME: the user to run the shell as. (defaults to the docker image USER)'
#	@echo '## COMMAND: the interactive command to run. (defaults to /bin/bash || /bin/sh)'
#	@echo '## CD: the working directory to use for COMMAND. (defaults to the docker image WORKDIR)'
	@echo
	@COMMAND=$${COMMAND:-"if [ -f /bin/bash ]; then /bin/bash; else /bin/sh; fi;"}; USERNAME_ARG=$$(test -z "$$USERNAME" && echo "" || echo "-u '$$USERNAME'"); CD_ARG=$$(test -z "$$CD" && echo "" || echo "-w '$$CD'"); make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="exec -it $${USERNAME_ARG} $${CD_ARG} ${SERVICE} /bin/sh -c '$${COMMAND}'"
