.PHONY: config
config:
	@[[ -z "$${INSTANCE:-$${instance}}" ]] && ENV_FILE="${ENV_FILE}" || ENV_FILE="${ENV_FILE}_$${INSTANCE:-$${instance}}"; echo "Configuring environment file: $${ENV_FILE}" && make --no-print-directory config-hook ENV_FILE="$${ENV_FILE}"

.PHONY: install # (re)builds images and (re)starts services (only if changed)
install: build start

.PHONY: uninstall # Remove service containers, leaving the volumes intact
uninstall: down

.PHONY: reinstall # Remove service containers, and then re-install (volumes left intact).
reinstall: uninstall install

.PHONY: docker-compose-lifecycle-cmd
docker-compose-lifecycle-cmd:
	@ENV_FILE="${ENV_FILE}"; PROJECT_NAME="$$(basename $$PWD)"; [[ -n "$${INSTANCE:-$${instance}}" ]] && ENV_FILE="${ENV_FILE}_$${INSTANCE:-$${instance}}" && PROJECT_NAME="$${PROJECT_NAME}_$${INSTANCE:-$${instance}}"; export COMPOSE_PROFILES=$$(${BIN}/dotenv -f "$${ENV_FILE}" get DOCKER_COMPOSE_PROFILES); echo "ENV_FILE=$${ENV_FILE}" && set -x && docker compose --env-file="$${ENV_FILE}" --project-name="$${PROJECT_NAME}" ${EXTRA_ARGS}

.PHONY: start # Start services
start:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="up -d"

.PHONY: up
up: start

.PHONY: stop # Stops services
stop:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="stop"

.PHONY: down
down:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="down"

.PHONY: restart # Restart services
restart:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="restart"

.PHONY: destroy # Deletes containers AND data volumes
destroy:
	@ENV_FILE="${ENV_FILE}"; PROJECT_NAME="$$(basename $$PWD)"; [[ -n "$${INSTANCE:-$${instance}}" ]] && ENV_FILE="${ENV_FILE}_$${INSTANCE:-$${instance}}"; ${BIN}/confirm no "Do you want to destroy all $$(basename $${PWD}) services AND volumes for the given context ($${ENV_FILE})" "?" && make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="down -v"

.PHONY: ps # Show containers status (docker compose ps)
ps:
	@echo "Showing containers for a single instance (use \`make status-all\` to see all instances.)"
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="ps"

.PHONY: status # Show status of all instances
status:
	@(echo -e "NAME\tENV\tID\tIMAGE\tSTATE\tPORTS" && docker ps --filter "label=com.docker.compose.project.working_dir=$${PWD}" -q | xargs -iXX docker inspect XX | jq '.[0]' | jq -r '(.Name[1:]) + "\t" + (.Config.Labels["com.docker.compose.project.environment_file"] | split("/";"")[-1]) + "\t" + .Id[:10] + "\t" + .Config.Image + "\t" + .State.Status + "\t" + (.NetworkSettings.Ports|tostring) ') | column -t
.PHONY: logs # Tail all containers logs (set SERVICE=name to filter for a single service container)
logs:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="logs -f ${SERVICE}"

