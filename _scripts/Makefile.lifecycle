.PHONY: config # Configure the .env_{DOCKER_CONTEXT}_{INSTANCE} file
config: check-instance-project script-wizard check-dist-vars
	@echo
	@echo "Configuring environment file: ${ENV_FILE}"
	@make -e --no-print-directory config-hook override instance=${INSTANCE}
	@make -e --no-print-directory list-targets | grep "^config-hook-echo-postscript$$" >/dev/null && make -e --no-print-directory config-hook-echo-postscript instance=${INSTANCE} || make -e --no-print-directory config-hook-echo-postscript-default instance=${INSTANCE}

config-hook-echo-postscript-default: 
	@echo ""
	@echo "Remember to run the 'install' command to deploy your changes:"
	@echo
	@if [[ -n "$${D_RYMCG_TECH_PROJECT_ALIAS}" ]]; then echo "   $${D_RYMCG_TECH_PROJECT_ALIAS} install"; elif [[ -n "$${D_RYMCG_TECH_CLI_ALIAS}" ]]; then echo "   $${D_RYMCG_TECH_CLI_ALIAS} make ${PROJECT} install"; elif [[ "$${D_RYMCG_TECH_SCRIPT}" == "true" ]]; then echo "   d.rymcg.tech make ${PROJECT} install";  else echo "   make install"; fi;
	@echo

.PHONY: config-dist # Copy the .env-dist to the .env_{DOCKER_CONTEXT}_{INSTANCE} file
config-dist: 
	@echo
	@echo "Configuring environment file: ${ENV_FILE}"
	@cp .env-dist ${ENV_FILE}
	@echo ""
	@echo "Copied the default .env-dist file. Edit ${ENV_FILE} by hand."

.PHONY: config-edit # Edit .env_{DOCKER_CONTEXT}_{INSTANCE} in your preferred $EDITOR
config-edit:
	@echo
	@echo "Configuring environment file: ${ENV_FILE}"
	@test -z "$$EDITOR" && echo "You need to set your preferred editor in the EDITOR shell variable." && false || true
	@echo "Opening $${EDITOR} ..."
	@$$EDITOR ${ENV_FILE} &
	@echo ""
	@echo ""


.PHONY: start # Start services
start:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="up -d ${service}"

.PHONY: up # Start services in the foreground and print logs to stdout. Ctrl-C to quit.
up: build
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="up ${service}"

.PHONY: stop # Stops services
stop:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="stop ${service}"

.PHONY: down
down:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="down ${service}"

.PHONY: restart # Restart services
restart:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="restart ${service}"

.PHONY: destroy # Deletes containers AND data volumes
destroy: check-instance-project
	@${BIN}/confirm no "Do you want to destroy $$([[ -n $$service ]] && echo 'SERVICE='$${service} of project $$(basename $${PWD}) || echo all $$(basename $${PWD}) services) AND volumes for the given context/instance (${ENV_FILE})" "?" && (make --no-print-directory destroy-hook-pre-rule-exists 2>/dev/null && make --no-print-directory destroy-hook-pre || true) && make --no-print-directory docker-compose-lifecycle-cmd  EXTRA_ARGS="down -v ${service}" && (make --no-print-directory destroy-hook-post-rule-exists 2>/dev/null && make --no-print-directory destroy-hook-post || true)

.PHONY: ps # Show containers status (docker compose ps)
ps:
	@echo "Showing containers for a single instance (use \`make status\` to see all instances.)"
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="ps -a"

.PHONY: status # Show status of all instances
status:
	@(echo -e "NAME\tENV\tID\tIMAGE\tSTATE\tHEALTH\tPORTS" && docker ps --filter "label=com.docker.compose.project.working_dir=$${PWD}" -q | xargs -iXX docker inspect XX | jq '.[0]' | jq -r '(.Name[1:]) + "\t" + (.Config.Labels["com.docker.compose.project.environment_file"] | split("/";"")[-1]) + "\t" + .Id[:10] + "\t" + .Config.Image + "\t" + .State.Status + "\t" + (.State.Health.Status|tostring) + "\t" + (.NetworkSettings.Ports|tostring) ') | column -t

.PHONY: logs # Tail all containers logs (set SERVICE=name to filter for one)
logs:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="logs -f -t ${service}"

.PHONY: logs-out # Output all containers logs (set SERVICE=name to filter for one)
logs-out:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="logs -t ${service}"

.PHONY: logs-truncate # Truncate container log (SERVICE=name argument required)
logs-truncate:
	@if test "${service}" == ""; then ${BIN}/fault "Missing SERVICE argument."; fi
	@${BIN}/docker_ssh truncate -s0 "$$(docker inspect --format='{{.LogPath}}' ${PROJECT_NAME}-${service}-1)"

.PHONY: pull # Pull docker images from registry
pull:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="pull"

.PHONY: wait # Wait until deployment is started and healthy
wait:
	@CONTAINER_IDS= ${BIN}/wait_until_healthy "${PROJECT_NAME}" "$$(make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS='ps -a -q')"

.PHONY: network-subnet # Find the docker subnet CIDR for the current project/instance
network-subnet:
	@docker network inspect ${PROJECT}_${INSTANCE} | jq -r .[].IPAM.Config[].Subnet

.PHONY: inspect # Inspect the given service (SERVICE=name argument required)
inspect:
	@if test "${service}" == ""; then ${BIN}/fault "Missing SERVICE argument."; fi
	@docker inspect ${PROJECT_NAME}-${service}-1  | jq ${JQARGS}

.PHONY: inspect-env # Print the environment variables for the given service 
inspect-env:
	@make --no-print-directory inspect JQARGS=".[].Config.Env" | jq -r -c '.[]'

.PHONY: inspect-labels # Print the docker labels of the given service (SERVICE=name argument required)
inspect-labels:
	@make --no-print-directory inspect JQARGS=".[].Config.Labels"

.PHONY: inspect-network # Print the network config of the given service 
inspect-network:
	@make --no-print-directory inspect JQARGS=".[].NetworkSettings.Networks"

.PHONY: inspect-mounts # Print the volume mounts of the given service
inspect-mounts:
	@make --no-print-directory inspect JQARGS=".[].Mounts"
