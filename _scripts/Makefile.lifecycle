.PHONY: config # Configure .env file
config:
	@echo "Configuring environment file: ${ENV_FILE}"
	make -e --no-print-directory config-hook override instance=${INSTANCE}

.PHONY: start # Start services
start:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="up -d"

.PHONY: up
up: build
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="up"

.PHONY: stop # Stops services
stop:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="stop"

.PHONY: down
down:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="down"

.PHONY: restart # Restart services
restart:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="restart"

.PHONY: destroy # Deletes containers AND data volumes
destroy:
	@${BIN}/confirm no "Do you want to destroy all $$(basename $${PWD}) services AND volumes for the given context ($${ENV_FILE})" "?" && (make --no-print-directory destroy-hook-pre-rule-exists 2>/dev/null && make --no-print-directory destroy-hook-pre ENV_FILE=/dev/null || true) && make --no-print-directory docker-compose-lifecycle-cmd  EXTRA_ARGS="down -v" ENV_FILE=/dev/null && (make --no-print-directory destroy-hook-post-rule-exists 2>/dev/null && make --no-print-directory destroy-hook-post ENV_FILE=/dev/null || true)

.PHONY: ps # Show containers status (docker compose ps)
ps:
	@echo "Showing containers for a single instance (use \`make status\` to see all instances.)"
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="ps -a"

.PHONY: status # Show status of all instances
status:
	@(echo -e "NAME\tENV\tID\tIMAGE\tSTATE\tPORTS" && docker ps --filter "label=com.docker.compose.project.working_dir=$${PWD}" -q | xargs -iXX docker inspect XX | jq '.[0]' | jq -r '(.Name[1:]) + "\t" + (.Config.Labels["com.docker.compose.project.environment_file"] | split("/";"")[-1]) + "\t" + .Id[:10] + "\t" + .Config.Image + "\t" + .State.Status + "\t" + (.NetworkSettings.Ports|tostring) ') | column -t

.PHONY: logs # Tail all containers logs (set SERVICE=name to filter for one)
logs:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="logs -f ${SERVICE}"

.PHONY: pull # Pull docker images from registry
pull:
	@make --no-print-directory docker-compose-lifecycle-cmd EXTRA_ARGS="pull"
