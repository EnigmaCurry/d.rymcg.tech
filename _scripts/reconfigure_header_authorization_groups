#!/bin/bash

## reconfigure_header_authorization_groups ENV_FILE

BIN=$(dirname ${BASH_SOURCE})
source ${BIN}/funcs.sh

ENV_FILE=../traefik/${1}
shift
## Make new .env if it doesn't exist:
test -f ${ENV_FILE} || cp ../traefik/.env-dist ${ENV_FILE}

manage_groups() {
    set -eo pipefail
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    readarray -t existing_groups < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq keys | jq -r ".[]")
    local GROUP
    GROUP=$(eval "wizard choose 'Choose a group to manage' ${existing_groups[@]@Q} 'Create a new group'")
    if [[ "${GROUP}" == "Create a new group" ]]; then
        create_group
    else
        manage_group "${GROUP}"
    fi
}

manage_group() {
    set -eo pipefail
    local GROUP=$1
    if [[ -z "${GROUP}" ]]; then return 1; fi
    while :
    do
        set +e
        local TASK
        TASK=$(wizard choose "Managing group ${GROUP} :: select a task ::" "Add members" "Remove members" "List all members" "Delete group")
        if [[ "$?" != "0" ]]; then
            return 1
        fi
        case "${TASK}" in
            "Add members")
                (add_group_members "${GROUP}");;
            "Remove members")
                (remove_group_users "${GROUP}");;
            "List all members")
                list_group_members "${GROUP}";;
            "Delete group")
                wizard confirm "Do you really want to delete the group ${GROUP}?" no && delete_group "${GROUP}" && break
        esac
    done
}

manage_users() {
    set -eo pipefail
    while :
    do
        local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
        readarray -t existing_groups < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq keys | jq -r ".[]")
        local GROUP
        users=()
        for GROUP in ${existing_groups[@]}; do
            readarray -t group_users < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq -r ".\"${GROUP}\"[]")
            users+=( "${group_users[@]}" )
        done
        IFS=$'\n' users=($(sort <<<"${users[*]}" | uniq)); unset IFS;
        local USER_TO_EDIT
        USER_TO_EDIT="$(eval "wizard choose 'Select a user by id' 'Create a new user' ${users[@]@Q}")"
        if [[ "$USER_TO_EDIT" == "Create a new user" ]]; then
            USER_TO_EDIT=$(wizard ask "Enter the user id for the new user:")
        fi
        manage_user "$USER_TO_EDIT"
    done
}

manage_user(){
    set -eo pipefail
    local USER_TO_EDIT=$1
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    readarray -t existing_groups < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq keys | jq -r ".[]")
    local user_groups=()
    for GROUP in ${existing_groups[@]}; do
        readarray -t group_users < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq -r ".\"${GROUP}\"[]")
        if element_in_array "$USER_TO_EDIT" "${group_users[@]}"; then
            user_groups+=("${GROUP}")
        fi
    done
    echo "user_groups: ${user_groups[@]}"
    local user_groups_json=$(jq -c -n '$ARGS.positional | unique' --args -- "${user_groups[@]}")
    echo "user_groups_json: ${user_groups_json[@]}"
    local GROUP_SELECTION
    readarray -t GROUP_SELECTION < <(eval "wizard select 'Editing user ${USER_TO_EDIT} :: Select group membership' ${existing_groups[@]@Q} --default '${user_groups_json}'")
    for GROUP in ${existing_groups[@]}; do
        readarray -t group_users < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq -r ".\"${GROUP}\"[]")
        if element_in_array "${GROUP}" "${GROUP_SELECTION[@]}"; then
            echo "group: $group"
            group_users+=("${USER_TO_EDIT}")
            ## Add user to selected groups:
            group_users=$(jq --compact-output --null-input '$ARGS.positional | unique' --args -- "${group_users[@]}")
            echo "group_users: ${group_users}"
            TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq --compact-output "(.[\"${GROUP}\"] = ${group_users})")
            echo $TRAEFIK_HEADER_AUTHORIZATION_GROUPS
        else
            ## Remove user from unselected groups:
            TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq --compact-output "del(.[\"${GROUP}\"][] | select(index(\"${USER_TO_EDIT}\")))")
        fi
    done
    echo "New config: ${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}"
    ${BIN}/dotenv -f ${ENV_FILE} set TRAEFIK_HEADER_AUTHORIZATION_GROUPS="${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}"
    echo "Wrote new TRAEFIK_HEADER_AUTHORIZATION_GROUPS to ${ENV_FILE}"
}

list_group_members() {
    local GROUP=$1
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    echo
    echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq -r ".\"${GROUP}\"[]"
    echo
}

add_group_members() {
    local GROUP=$1
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    readarray -t users < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq -r ".\"${GROUP}\"[]")
    echo "Enter the new user id(s) to add, one per line:"
    while :
    do
        user_id=$(wizard ask "Enter a user ID (press Esc or enter a blank value to finish)" --allow-blank)
        if [[ $user_id == "" ]]; then
            break
        fi
        users+=("${user_id}")
    done
    ## Add user IDs to group
    users=$(jq --compact-output --null-input '$ARGS.positional | unique' --args -- "${users[@]}")
    TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq --compact-output "(.${GROUP} = ${users})")
    ${BIN}/dotenv -f ${ENV_FILE} set TRAEFIK_HEADER_AUTHORIZATION_GROUPS="${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}"
    echo "Wrote new TRAEFIK_HEADER_AUTHORIZATION_GROUPS to ${ENV_FILE}"
}

remove_group_users() {
    set -eo pipefail
    local GROUP=$1
    if [[ -z "${GROUP}" ]]; then return 1; fi
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    readarray -t existing_users < <(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq -r ".\"${GROUP}\"[]")
    local membership=$(jq -c -n '$ARGS.positional' --args "${existing_users[@]}")
    membership=$(wizard select "Managing group ${GROUP} :: editing group membership ::" ${existing_users[@]} --default "${membership}" --json)
    TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq --compact-output "(.${GROUP} = ${membership})")
    echo TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$TRAEFIK_HEADER_AUTHORIZATION_GROUPS
    ${BIN}/dotenv -f ${ENV_FILE} set TRAEFIK_HEADER_AUTHORIZATION_GROUPS="${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}"
    echo "Wrote new TRAEFIK_HEADER_AUTHORIZATION_GROUPS to ${ENV_FILE}"
}


list_groups() {
    set -eo pipefail
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    if [[ $TRAEFIK_HEADER_AUTHORIZATION_GROUPS == "{}" || $TRAEFIK_HEADER_AUTHORIZATION_GROUPS == "" ]]; then
        echo "No authorization groups have been defined yet."
        return 0
    fi

    echo "Here is a list of your current authorization groups and their users:"
    echo
    echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq -C . | sed 's/^/    /'
}

create_group() {
    set -eo pipefail
    local GROUP
    GROUP=$(wizard ask "Enter the name of the group to create:")

    ## Check if the group exists already:
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    local INDEX=$(echo "$TRAEFIK_HEADER_AUTHORIZATION_GROUPS" | jq --compact-output 'keys | index("'${GROUP}'")')
    if [[ $INDEX != "null" ]]; then
        echo "Group ${GROUP} already exists."
        return 0
    fi

    users=()
    if wizard confirm "Do you want to add users to this group now?" no; then
        echo "Enter the new user id(s) to add, one per line:"
        while :
        do
            user_id=$(wizard ask "Enter a user ID (Press Esc or enter a blank value to finish)" --allow-blank)
            if [[ $user_id == "" ]]; then
                break
            fi
            users+=("${user_id}")
        done
    fi

    ## Add the new group:
     users=$(jq --compact-output --null-input '$ARGS.positional | unique' --args -- "${users[@]}")
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq --compact-output "(.${GROUP} = ${users})")
    ${BIN}/dotenv -f ${ENV_FILE} set TRAEFIK_HEADER_AUTHORIZATION_GROUPS="${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}"
    echo "Wrote new TRAEFIK_HEADER_AUTHORIZATION_GROUPS to ${ENV_FILE}"

}

delete_group() {
    set -eo pipefail
    local GROUP=$1
    if [[ -z "${GROUP}" ]]; then return 1; fi
    local TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    ## Delete group
    TRAEFIK_HEADER_AUTHORIZATION_GROUPS=$(echo "${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}" | jq --compact-output "del(.${GROUP})")
    ${BIN}/dotenv -f ${ENV_FILE} set TRAEFIK_HEADER_AUTHORIZATION_GROUPS="${TRAEFIK_HEADER_AUTHORIZATION_GROUPS}"
    echo "Wrote new TRAEFIK_HEADER_AUTHORIZATION_GROUPS to ${ENV_FILE}"
}

check_does_traefik_need_restart() {
    NEW_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)
    if [[ "$EXISTING_AUTHORIZATION_GROUPS" != "$NEW_AUTHORIZATION_GROUPS" ]]; then
        if ${BIN}/confirm no "Config change detected. Do you want to restart Traefik now" "?"; then
            make install
        else
            echo 'Remember to restart Traefik (`make install`) for group changes to take effect!'
        fi
    fi
}

list_middlewares() {
    set -eo pipefail
    exe docker compose --env-file=${ENV_FILE} exec -it traefik /bin/sh -c "cat /data/config/dynamic/header-authorization.yml"
    echo
    echo '## REMEMBER: if you have not yet re-run `make install` for Traefik,'
    echo '## your live configration may be out sync with your .env file.'
}

EXISTING_AUTHORIZATION_GROUPS=$(${BIN}/dotenv -f ${ENV_FILE} get TRAEFIK_HEADER_AUTHORIZATION_GROUPS)

while :
do
    echo ""
    set +e
    TASK=$(wizard choose "Security Group Manager (main menu):" "Group Manager" "User Manager" "List all members" "Quit")
    if [[ $? != 0 ]]; then
        check_does_traefik_need_restart
        exit 0
    fi
    case "${TASK}" in
        "Group Manager")
            (manage_groups);;
        "User Manager")
            (manage_users);;
        "List all members")
            (list_groups);;
        "Quit")
            check_does_traefik_need_restart
            exit 0;;
    esac
done
