# The docker image to use:
OPENWEBUI_IMAGE=ghcr.io/open-webui/open-webui:main

# The domain name for the openwebui service:
OPENWEBUI_TRAEFIK_HOST=openwebui.example.com
# The domain name for the ollama service, if you exposse it:
OPENWEBUI_OLLAMA_TRAEFIK_HOST=ollama.example.com

# The name of this instance. If there is only one instance, use 'default'.
OPENWEBUI_INSTANCE=

## Enter the profile for the processing engine: cuda (for nvidia
## GPUs), rocm (for AMD GPUs), cpu (to use only the CPU), or default
## (to not install ollama - only install Open-WebUI to use with
## external LLM runners such as OpenAI-compatible APIs).
DOCKER_COMPOSE_PROFILES=default

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
OPENWEBUI_IP_SOURCERANGE=0.0.0.0/0
OPENWEBUI_OLLAMA_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
OPENWEBUI_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Forgejo server can log into your app and
# have full access.
OPENWEBUI_OAUTH2=false
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`.
OPENWEBUI_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
OPENWEBUI_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
OPENWEBUI_MTLS_AUTHORIZED_CERTS=*.clients.openwebui.example.com

## Leave OPENWEBUI_MODELS_MOUNTPOINT blank to save models in the named
## Docker volume for the Ollama container, or enter a path on the host
## to save them there.
OPENWEBUI_MODELS_HOST_PATH=

## Set to `true` to expose the Ollama service (e.g., to be used by
## other services you host).
OPENWEBUI_EXPOSE_OLLAMA=false

# META:
# PREFIX=OPENWEBUI
