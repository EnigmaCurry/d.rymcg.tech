# The domain name for this instance of ${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}:
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_TRAEFIK_HOST=${CREATE_TEMPLATE_PROJECT_URL_NAME}.example.com

## Create a unique name for this instance of ${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}:
##`make config` will set this to `default` if you do not specify it.
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_INSTANCE=

# Filter access by IP address source range (CIDR):
# See: https://doc.traefik.io/traefik/middlewares/http/ipwhitelist/
## Disallow all access:
#${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_IP_SOURCERANGE="0.0.0.0/32"
## Allow all access:
#${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_IP_SOURCERANGE="0.0.0.0/0"
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_IP_SOURCERANGE="0.0.0.0/0"

# HTTP Basic Authentication
# Use `make config` to generate and configure this setting interactively.
# Set multiple htpasswd encoded username/passwords comma separated; blank to disable
# See: https://doc.traefik.io/traefik/middlewares/http/basicauth/
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Gitea server can log into your app and
# have full access.
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_OAUTH2_AUTHORIZED_GROUP=

## You may customize the UID and GID that the container runs as, this
## is passed into the Dockerfile as a build ARG.
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_UID=54321
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_GID=54321

# PostgreSQL
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_POSTGRES_DATABASE=${CREATE_TEMPLATE_PROJECT_NAME}
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_POSTGRES_USER=${CREATE_TEMPLATE_PROJECT_NAME}
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_POSTGRES_PASSWORD=

# Python log level:
# use debug, info, warning, error, or critical
${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_API_LOG_LEVEL=debug

${CREATE_TEMPLATE_PROJECT_NAME_UPPERCASE}_API_UPLOAD_FOLDER=/uploads
