#! Standard boilerplate generated by d.rymcg.tech/_templates/instance_header.yaml
#! ... scroll down for the custom section ...
#!
#@ load("@ytt:data", "data")
#@ project = data.values.project
#@ instance = data.values.instance
#@ context = data.values.context
#@ traefik_host = data.values.traefik_host
#@ traefik_host_var = data.values.traefik_host_var
#@ development_mode = data.values.development_mode in ('true','True')
#@ ip_sourcerange_var = data.values.ip_sourcerange_var
#@ enable_http_auth = "http_auth" in data.values and len(data.values.http_auth.strip()) > 0
#@ http_auth_var = data.values.http_auth_var

#@ load("@ytt:overlay", "overlay")

#@ def basic_service():
restart: unless-stopped
#@yaml/text-templated-strings
environment:
  #! Standard environment variables all containers should define:
  - DOCKER_PROJECT=(@= project @)
  - DOCKER_INSTANCE=(@= instance @)
  - DOCKER_CONTEXT=(@= context @)
  - DEVELOPMENT_MODE=(@= data.values.development_mode @)
security_opt:
  - no-new-privileges:true
cap_drop:
  - ALL
sysctls:
  - net.ipv4.ip_unprivileged_port_start=1024
cap_add:
  #! These are all of the available Linux system capabilities that containers can access
  #! https://man.archlinux.org/man/capabilities.7
  #!
  #! These are the capabilities that Docker would add by default,
  #! except not, because we use cap_drop: ALL
  #! https://github.com/moby/moby/blob/2b9de2e24a9877843c1998366ac97959c12b45aa/oci/caps/defaults.go#L6-L19
  #! You can try commenting these out and test if you app works
  #! without them:
  - CHOWN
  - DAC_OVERRIDE
  - FSETID
  - FOWNER
  - MKNOD
  - NET_RAW
  - SETGID
  - SETUID
  - SETFCAP
  - SETPCAP
  - NET_BIND_SERVICE
  - SYS_CHROOT
  - KILL
  - AUDIT_WRITE
  #! The rest of these are PRIVILEGED capabilities:
  #! Unless you know you need one of these, you should delete
  #! them, or leave them commented out, they are for reference only!
  #! - AUDIT_CONTROL
  #! - AUDIT_READ
  #! - BLOCK_SUSPEND
  #! - DAC_READ_SEARCH
  #! - IPC_LOCK
  #! - IPC_OWNER
  #! - LEASE
  #! - LINUX_IMMUTABLE
  #! - MAC_ADMIN
  #! - MAC_OVERRIDE
  #! - NET_ADMIN
  #! - NET_BROADCAST
  #! - SYS_ADMIN
  #! - SYS_BOOT
  #! - SYSLOG
  #! - SYS_MODULE
  #! - SYS_NICE
  #! - SYS_PACCT
  #! - SYS_PTRACE
  #! - SYS_RAWIO
  #! - SYS_RESOURCE
  #! - SYS_TIME
  #! - SYS_TTY_CONFIG
  #! - WAKE_ALARM
#@ end

#@yaml/text-templated-strings
#@ def basic_traefik_router(router, rule, entrypoint="websecure", middlewares=('ipwhitelist','basicauth')):
#@ enabled_middlewares = []
#@ router = "{}-{}-{}".format(project,instance,router)
labels:
  - "traefik.http.routers.(@= router @).rule=(@= rule @)"
  - "traefik.http.routers.(@= router @).entrypoints=(@= entrypoint @)"
  #@ if 'ipwhitelist' in middlewares:
  #@ enabled_middlewares.append("{}-ipwhitelist".format(router))
  - "traefik.http.middlewares.(@= router @)-ipwhitelist.ipwhitelist.sourcerange=${(@= ip_sourcerange_var @)}"
  #@ end
  #@ if 'basicauth' in middlewares and enable_http_auth:
  #@ enabled_middlewares.append("{}-basicauth".format(router))
  - "traefik.http.middlewares.(@= router @)-basicauth.basicauth.users=${(@= http_auth_var @)}"
  #@ end
  - "traefik.http.routers.(@= router @).middlewares=(@= ','.join(enabled_middlewares) @)"
#@ end

services: {}

#! End of standard boilerplate.
#! Custom services section starts here ...

---
