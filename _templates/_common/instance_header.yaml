#! Standard boilerplate generated by d.rymcg.tech/_templates/instance_header.yaml
#! ... scroll down for the custom section ...
#!
#@ load("@ytt:data", "data")
#@ project = data.values.project
#@ instance = data.values.instance
#@ context = data.values.context
#@ traefik_host = data.values.traefik_host
#@ traefik_host_var = data.values.traefik_host_var
#@ development_mode = data.values.development_mode in ('true','True')
#@ ip_sourcerange_var = data.values.ip_sourcerange_var
#@ enable_http_auth = "http_auth" in data.values and len(data.values.http_auth.strip()) > 0
#@ http_auth_var = data.values.http_auth_var

#@ load("@ytt:overlay", "overlay")

#@ def basic_environment():
#@yaml/text-templated-strings
environment:
  #! Standard environment variables all containers should define:
  - DOCKER_PROJECT=(@= project @)
  - DOCKER_INSTANCE=(@= instance @)
  - DOCKER_CONTEXT=(@= context @)
  - DEVELOPMENT_MODE=(@= data.values.development_mode @)
#@ end

#@yaml/text-templated-strings
#@ def basic_traefik_router(router, rule, entrypoint="websecure", middlewares=('ipwhitelist','basicauth')):
#@ enabled_middlewares = []
#@ router = "{}-{}-{}".format(project,instance,router)
labels:
  - "traefik.http.routers.(@= router @).rule=(@= rule @)"
  - "traefik.http.routers.(@= router @).entrypoints=(@= entrypoint @)"
  #@ if 'ipwhitelist' in middlewares:
  #@ enabled_middlewares.append("{}-ipwhitelist".format(router))
  - "traefik.http.middlewares.(@= router @)-ipwhitelist.ipwhitelist.sourcerange=${(@= ip_sourcerange_var @)}"
  #@ end
  #@ if 'basicauth' in middlewares and enable_http_auth:
  #@ enabled_middlewares.append("{}-basicauth".format(router))
  - "traefik.http.middlewares.(@= router @)-basicauth.basicauth.users=${(@= http_auth_var @)}"
  #@ end
  - "traefik.http.routers.(@= router @).middlewares=(@= ','.join(enabled_middlewares) @)"
#@ end

services: {}

#! End of standard boilerplate.
#! Custom services section starts here ...

---
