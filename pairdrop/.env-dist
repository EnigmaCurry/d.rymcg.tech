# The domain name for the pairdrop service:
PAIRDROP_TRAEFIK_HOST=pairdrop.example.com

# The name of this instance. If there is only one instance, use 'default'.
PAIRDROP_INSTANCE=

# https://github.com/linuxserver/docker-pairdrop/releases
PAIRDROP_IMAGE="lscr.io/linuxserver/pairdrop:latest"

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
PAIRDROP_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
PAIRDROP_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Forgejo server can log into your app and
# have full access.
PAIRDROP_OAUTH2=false
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
PAIRDROP_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
PAIRDROP_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
PAIRDROP_MTLS_AUTHORIZED_CERTS=*.clients.pairdrop.example.com

## You can run the pairdrop service as any user/group:
PAIRDROP_UID=54321
PAIRDROP_GID=54321

## Turn on debug mode.
## Warning: this logs TURN credentials to the container logs.
PAIRDROP_DEBUG_MODE=false

## You must set the TURN server to be able to connect peers behind NAT:
## If you don't have one yet, install d.rymcg.tech's coturn service.
PAIRDROP_TURN_DOMAIN=turn.example.com
## Enter UDP and TLS ports:
PAIRDROP_TURN_LISTEN_PORT=3478
PAIRDROP_TURN_TLS_PORT=443
## Enter TURN credentials:
PAIRDROP_TURN_USERNAME=
PAIRDROP_TURN_PASSWORD=

## Pairdrop requires credentials to use some external TURN server.
## For pairdrop to generate it's own TURN credentials, you must share
## the same secret value that coturn uses for its auth: COTURN_STATIC_AUTH_SECRET
## If PAIRDROP_TURN_USERNAME and PAIRDROP_TURN_PASSWORD are set, this setting is ignored:
PAIRDROP_COTURN_STATIC_AUTH_SECRET=

## How often should pairdrop restart itself in order to generate fresh TURN credentials?
## The TURN credentials themselves will have a TTL twice this value.
PAIRDROP_RESTART_MINUTES=240

## Labels to configure Homepage
## See https://github.com/EnigmaCurry/d.rymcg.tech/tree/master/homepage#homepage
PAIRDROP_HOMEPAGE_LABELS_ENABLE=true
PAIRDROP_HOMEPAGE_GROUP_PAIRDROP=Network
PAIRDROP_HOMEPAGE_NAME_PAIRDROP=Pairdrop
PAIRDROP_HOMEPAGE_ICON_PAIRDROP=pairdrop
PAIRDROP_HOMEPAGE_DESCRIPTION_PAIRDROP=
PAIRDROP_HOMEPAGE_SHOW_STATS_PAIRDROP=true

# META:
# PREFIX=PAIRDROP
