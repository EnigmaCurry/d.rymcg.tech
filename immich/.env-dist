# The docker image to use for Immich Server (https://github.com/immich-app/immich/pkgs/container/immich-server):
IMMICH_IMAGE=ghcr.io/immich-app/immich-server:pr-12438 
# The docker image to use for Immich Machine Learning (https://github.com/immich-app/immich/pkgs/container/immich-machine-learning):
IMMICH_ML_IMAGE=ghcr.io/immich-app/immich-machine-learning:pr-12456-cuda
# The docker image to use for Postgres ():
IMMICH_POSTRGES_IMAGE=docker.io/tensorchord/pgvecto-rs

# The domain name for the immich service:
IMMICH_TRAEFIK_HOST=immich.example.com

# The name of this instance. If there is only one instance, use 'default'.
IMMICH_INSTANCE=

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
IMMICH_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
IMMICH_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Gitea server can log into your app and
# have full access.
IMMICH_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
IMMICH_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
IMMICH_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
IMMICH_MTLS_AUTHORIZED_CERTS=*.clients.immich.example.com

# Enter the path on the host where you want Immich to upload new images (e.g., `/mnt/photos`, `~/images`, `../pictures`), or enter a name to be used as a named Docker volume which will be created for you (e.g., photos).
IMMICH_UPLOAD_LOCATION=photos

# Machine Learning Hardware Acceleration (can be "None", "CPU", "ArmNN" "Cuda", "OpenVINO", or "OpenVINO-WSL")
IMMICH_ML_HWACCEL_TYPE=None

# Transcoding Hardware Acceleration (can be "None", "CPU", "NVENC", "QSV", "RKMPP", "VAAPI", or "VAAPI-WSL")
IMMICH_TRANSCODE_HWACCEL_TYPE=None

# Log Level can be verbose, debug, log, warn, or error
IMMICH_LOG_LEVEL=warn

IMMICH_TRUSTED_PROXIES=10.13.16.0/24

IMMICH_DB_PASSWORD=
IMMICH_DB_USER=postgres
IMMICH_DB=immich