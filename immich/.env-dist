# The docker image to use for Immich Server (https://github.com/immich-app/immich/pkgs/container/immich-server):
IMMICH_IMAGE=ghcr.io/immich-app/immich-server:v1.130.3
# The docker image to use for Immich Machine Learning (https://github.com/immich-app/immich/pkgs/container/immich-machine-learning):
# Do *not* include the trailing hardware identifier in the tag (e.g.,
# use "v1.115.0" instead of "v1.115.0-cuda") - the hardware identifier is
# automatically added based on the Hardware Acceleration you select.
IMMICH_ML_IMAGE=ghcr.io/immich-app/immich-machine-learning:v1.130.3
# The docker image to use for Postgres ():
IMMICH_POSTRGES_IMAGE=docker.io/tensorchord/pgvecto-rs

# The domain name for the immich service:
IMMICH_TRAEFIK_HOST=immich.example.com

# The name of this instance. If there is only one instance, use 'default'.
IMMICH_INSTANCE=

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
IMMICH_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
IMMICH_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Forgejo server can log into your app and
# have full access.
IMMICH_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
IMMICH_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
IMMICH_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
IMMICH_MTLS_AUTHORIZED_CERTS=*.clients.immich.example.com

# Set to "false" to have Immich upload images to a named Docker volume,
# or to "true" to have Immich upload images to a bind mount directory on
# the host.
IMMICH_USE_EXTERNAL_VOLUME=false
# If IMMICH_USE_EXTERNAL_VOLUME=true, set to the path on the host that you
# want Immich to upload new images to (e.g., `/mnt/photos` or `~/images`).
IMMICH_EXTERNAL_VOLUME=

# Machine Learning Hardware Acceleration (can be "None", "CPU", "ArmNN" "Cuda", "OpenVINO", or "OpenVINO-WSL")
IMMICH_ML_HWACCEL_TYPE=None

# Transcoding Hardware Acceleration (can be "None", "CPU", "NVENC", "QSV", "RKMPP", "VAAPI", or "VAAPI-WSL")
IMMICH_TRANSCODE_HWACCEL_TYPE=None

IMMICH_TRUSTED_PROXIES=10.13.16.0/24

IMMICH_DB_PASSWORD=
IMMICH_DB_USER=postgres
IMMICH_DB=immich

# META:
# PREFIX=IMMICH
