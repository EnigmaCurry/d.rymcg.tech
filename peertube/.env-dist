# The docker image to use (https://hub.docker.com/r/chocobozzz/peertube/tags):
PEERTUBE_IMAGE=chocobozzz/peertube:v7.1.0-bookworm
# The Postgres image to use:
PEERTUBE_POSTGRES_IMAGE=postgres:16-alpine

# The domain name for the peertube service:
PEERTUBE_TRAEFIK_HOST=peertube.example.com

# The name of this instance. If there is only one instance, use 'default'.
PEERTUBE_INSTANCE=

# You can enable livestreaming via RTMP or RTMPS.
# Valid options are "Disabled", "RTMP", or "RTMPS"
PEERTUBE_LIVESTREAMING=Disabled

# Filter access by IP address source range (CIDR):
##Disallow all access: 0.0.0.0/32
##Allow all access: 0.0.0.0/0
PEERTUBE_IP_SOURCERANGE=0.0.0.0/0

# HTTP Basic Authentication:
# Use `make config` to fill this in properly, or set this to blank to disable.
PEERTUBE_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Forgejo server can log into your app and
# have full access.
PEERTUBE_OAUTH2=false
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
PEERTUBE_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
PEERTUBE_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
PEERTUBE_MTLS_AUTHORIZED_CERTS=*.clients.peertube.example.com


## -- Peertube environment variables -- ##
##--------------------------------------##
# Database / Postgres service configuration
PEERTUBE_POSTGRES_USER=postgres
PEERTUBE_POSTGRES_PASSWORD=
PEERTUBE_DB_SSL=false
# Default to Postgres service name "postgres" in docker-compose.yml

# PeerTube server configuration
# If you need more than one IP as trust_proxy, pass them as a JSON list.
# e.g., PEERTUBE_TRUST_PROXY=["127.0.0.1", "10.13.16.1/32"]
PEERTUBE_TRUST_PROXY=["127.0.0.1"]

# Generate one using `openssl rand -hex 32`
PEERTUBE_SECRET=

# E-mail configuration
# If you use a Custom SMTP server
PEERTUBE_SMTP_USERNAME=
PEERTUBE_SMTP_PASSWORD=
# Default to Postfix service name "postfix" in docker-compose.yml
# May be the hostname of your Custom SMTP server
PEERTUBE_SMTP_HOSTNAME=postfix
PEERTUBE_SMTP_PORT=25
PEERTUBE_SMTP_FROM=
PEERTUBE_SMTP_TLS=false
PEERTUBE_SMTP_DISABLE_STARTTLS=false
PEERTUBE_ADMIN_EMAIL=

# Postfix service configuration
PEERTUBE_POSTFIX_MYHOSTNAME=
# If you need to generate a list of sub/DOMAIN keys
# pass them as a whitespace separated string <DOMAIN>=<selector>
PEERTUBE_OPENDKIM_DOMAINS=
# see https://github.com/wader/postfix-relay/pull/18
PEERTUBE_OPENDKIM_REQUIRESAFEKEYS=no

PEERTUBE_LOG_LEVEL=info

# /!\ Prefer to use the PeerTube admin interface to set the following configurations /!\
#PEERTUBE_SIGNUP_ENABLED=true
#PEERTUBE_TRANSCODING_ENABLED=true
#PEERTUBE_CONTACT_FORM_ENABLED=true


# META:
# PREFIX=PEERTUBE
