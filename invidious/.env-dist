## You should always use the latest version of invidious, otherwise it probably won't work:
## If you are on ARM64, you may need to switch to the latest-arm64 tag.
INVIDIOUS_IMAGE=quay.io/invidious/invidious:latest
INVIDIOUS_TRAEFIK_HOST=yt.example.com
INVIDIOUS_INSTANCE=

INVIDIOUS_POSTGRES_PASSWORD=
INVIDIOUS_HTTP_AUTH=

# OAUTH2
# Set to `true` to use OpenID/OAuth2 authentication via the
# traefik-forward-auth service in d.rymcg.tech.
# Using OpenID/OAuth2 will require login to access your app,
# but it will not affect what a successfully logged-in person can do in your
# app. If your app has built-in authentication and can check the user
# header that traefik-forward-auth sends, then your app can limit what the
# logged-in person can do in the app. But if your app can't check the user
# header, or if your app doesn't have built-in authentication at all, then
# any person with an account on your Gitea server can log into your app and
# have full access.
INVIDIOUS_OAUTH2=
# In addition to Oauth2 authentication, you can configure basic authorization
# by entering which authorization group can log into your app. You create
# groups of email addresses in the `traefik` folder by running `make groups`. 
INVIDIOUS_OAUTH2_AUTHORIZED_GROUP=

# Mutual TLS (mTLS):
# Set true or false. If true, all clients must present a certificate signed by Step-CA:
INVIDIOUS_MTLS_AUTH=false
# Enter a comma separated list of client domains allowed to connect via mTLS.
# Wildcards are allowed and encouraged on a per-app basis:
INVIDIOUS_MTLS_AUTHORIZED_CERTS=*.clients.invidious.example.com

INVIDIOUS_REALM=Invidious

INVIDIOUS_IP_SOURCERANGE=0.0.0.0/0

INVIDIOUS_HMAC_KEY=

# In the ongoing battle to bypass Google's attempt to block non-Google services
# from scraping public Youtube videos and information, the current method for
# Invidious to work is to pass a Proof of Origin Token to Google (if your
# public IP is blocked by Google). To generate po_token and visitor_data
# identities for passing all verification checks on the YouTube side, run
# `docker run quay.io/invidious/youtube-trusted-session-generator` on the same
# public IP address as the one blocked by YouTube, and copy the `visitor_data`
# and `po_token` values here. The `po_token` and `visitor_data` tokens will make
# your entire Invidious session more easily traceable by YouTube because it
# is tied to a unique identifier - more info here:
# https://docs.invidious.io/installation/#docker-compose-method-production
INVIDIOUS_VISITOR_DATA=
INVIDIOUS_PO_TOKEN=

# Set to `true` to enable sending usage staticts to Invidious.
INVIDIOUS_STATISTICS_ENABLED=false